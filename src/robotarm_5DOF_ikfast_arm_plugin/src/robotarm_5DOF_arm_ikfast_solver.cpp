/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2021-09-05 13:38:30.781340
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[0]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKsin(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=((0.000438399859712067)*x1);
x11=((0.159)*x4);
x12=((0.999999680000154)*x9);
x13=((1.0)*x1);
x14=((0.547999824640084)*x3);
x15=((0.159)*x5);
x16=(x2*x3);
x17=(x1*x5);
x18=((-0.159)*x5);
x19=(x0*x3);
x20=(x1*x4);
x21=((-0.159)*x4);
x22=(x0*x1);
x23=(x3*x4);
x24=(x1*x2);
x25=(x3*x5);
x26=((0.000799999744000123)*x22);
x27=((0.548)*x24);
x28=((0.000799999744000123)*x24);
x29=((0.548)*x22);
x30=((((-1.0)*x26))+x16);
x31=((((-1.0)*x0*x13))+(((0.000799999744000123)*x16)));
x32=((((-1.0)*x16))+x26);
x33=(x19+x28);
x34=((((-0.000799999744000123)*x19))+(((-1.0)*x13*x2)));
x35=((((-1.0)*x28))+(((-1.0)*x19)));
x36=(x30*x4);
x37=(x31*x4);
x38=(x32*x5);
x39=(x35*x5);
IkReal x40=((1.0)*x27);
eetrans[0]=((((-1.0)*x40))+((x7*((((x18*x34))+((x21*x30))))))+((x6*((((x11*x34))+((x15*x32))))))+((x4*(((((-1.0)*x40))+(((-0.000438399859712067)*x19))))))+((x5*((((x0*x10))+(((-0.548)*x16))))))+(((-0.000438399859712067)*x19)));
IkReal x41=((1.0)*x29);
eetrans[1]=(((x4*(((((-1.0)*x41))+(((0.000438399859712067)*x16))))))+((x5*(((((-0.548)*x19))+(((-1.0)*x10*x2))))))+(((-1.0)*x41))+((x7*((((x18*x31))+((x21*x33))))))+((x6*((((x11*x31))+((x15*x35))))))+(((0.000438399859712067)*x16)));
eetrans[2]=((0.035)+(((-0.547999824640084)*x17))+((x14*x4))+x14+((x7*(((((-0.158999949120024)*x25))+(((-0.158999949120024)*x20))))))+((x6*(((((0.158999949120024)*x23))+(((-0.158999949120024)*x17)))))));
eerot[0]=(((x0*x12))+((x8*((((x6*((((x34*x5))+x36))))+((x7*((((x34*x4))+x38)))))))));
eerot[1]=((((-1.0)*x12*x2))+((x8*((((x6*((((x31*x5))+((x33*x4))))))+((x7*((x39+x37)))))))));
eerot[2]=((((0.000799999744000123)*x9))+((x8*((((x6*(((((0.999999680000154)*x25))+(((0.999999680000154)*x20))))))+((x7*(((((0.999999680000154)*x23))+(((-0.999999680000154)*x17)))))))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=py;
new_r02=r02;
new_pz=((-0.035)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x44 = IKatan2WithCheck(IkReal(((0.999999680000154)*py)),IkReal(((-0.999999680000154)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x44.valid){
continue;
}
IkReal x42=((1.0)*(x44.value));
if((((((0.99999936000041)*(py*py)))+(((0.99999936000041)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x45=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.99999936000041)*(py*py)))+(((0.99999936000041)*(px*px)))))),-1);
if(!x45.valid){
continue;
}
if( (((0.000799999744000123)*pz*(x45.value))) < -1-IKFAST_SINCOS_THRESH || (((0.000799999744000123)*pz*(x45.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x43=IKasin(((0.000799999744000123)*pz*(x45.value)));
j0array[0]=((((-1.0)*x42))+x43);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x43))+(((-1.0)*x42)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

IkReal op[8+1], zeror[8];
int numroots;
IkReal x46=(px*r00);
IkReal x47=(pz*r02);
IkReal x48=(py*r01);
IkReal x49=((1.09599964928017)*r02);
IkReal x50=((0.348527888471094)*pz);
IkReal x51=(py*sj0);
IkReal x52=(cj0*r01);
IkReal x53=(r01*sj0);
IkReal x54=(r00*sj0);
IkReal x55=(cj0*px);
IkReal x56=(cj0*py);
IkReal x57=(cj0*r00);
IkReal x58=(px*sj0);
IkReal x59=((0.159)*(px*px));
IkReal x60=((0.159)*(pz*pz));
IkReal x61=((0.159)*(py*py));
IkReal x62=((0.000876799719424135)*x52);
IkReal x63=((0.000876799719424135)*x54);
IkReal x64=((0.000278822310776875)*x56);
IkReal x65=((0.000278822310776875)*x58);
IkReal x66=(x50+x64);
IkReal x67=(x49+x62);
IkReal x68=((((1.096)*x57))+(((1.096)*x53)));
IkReal x69=(x48+x46+x47);
IkReal x70=((((0.348528)*x51))+(((0.348528)*x55)));
IkReal x71=((((2.192)*x57))+(((2.192)*x53)));
IkReal x72=((((0.697056)*x55))+(((0.697056)*x51)));
IkReal x73=((-1.0)*x68);
IkReal x74=((-1.0)*x70);
IkReal x75=((((2.19199929856034)*r02))+(((0.00175359943884827)*x52))+(((-0.00175359943884827)*x54)));
IkReal x76=((((0.697055776942187)*pz))+(((0.00055764462155375)*x56))+(((-0.00055764462155375)*x58)));
IkReal x77=(x59+x60+x61);
IkReal x78=((-0.004019679)+x77);
IkReal x79=(x63+x69+(((-1.0)*x67)));
IkReal x80=(x67+x69+(((-1.0)*x63)));
IkReal x81=((0.186973665)+x77+x65+(((-1.0)*x66)));
IkReal x82=((0.186973665)+x77+x66+(((-1.0)*x65)));
IkReal gconst0=x79;
IkReal gconst1=x68;
IkReal gconst2=x69;
IkReal gconst3=x81;
IkReal gconst4=x70;
IkReal gconst5=x78;
IkReal gconst6=x79;
IkReal gconst7=x68;
IkReal gconst8=x69;
IkReal gconst9=x81;
IkReal gconst10=x70;
IkReal gconst11=x78;
IkReal gconst12=x71;
IkReal gconst13=x75;
IkReal gconst14=x72;
IkReal gconst15=x76;
IkReal gconst16=x71;
IkReal gconst17=x75;
IkReal gconst18=x72;
IkReal gconst19=x76;
IkReal gconst20=x80;
IkReal gconst21=x73;
IkReal gconst22=x69;
IkReal gconst23=x82;
IkReal gconst24=x74;
IkReal gconst25=x78;
IkReal gconst26=x80;
IkReal gconst27=x73;
IkReal gconst28=x69;
IkReal gconst29=x82;
IkReal gconst30=x74;
IkReal gconst31=x78;
IkReal x83=(gconst27*gconst29);
IkReal x84=(gconst22*gconst4);
IkReal x85=(gconst16*gconst25);
IkReal x86=(gconst10*gconst21);
IkReal x87=(gconst0*gconst5);
IkReal x88=(gconst28*gconst9);
IkReal x89=((1.0)*gconst16);
IkReal x90=(gconst22*gconst24);
IkReal x91=((1.0)*gconst31);
IkReal x92=(gconst5*gconst6);
IkReal x93=(gconst15*gconst2);
IkReal x94=(gconst2*gconst4);
IkReal x95=(gconst10*gconst13);
IkReal x96=(gconst26*gconst5);
IkReal x97=(gconst1*gconst17);
IkReal x98=((1.0)*gconst26);
IkReal x99=(gconst13*gconst7);
IkReal x100=((1.0)*gconst29);
IkReal x101=(gconst16*gconst5);
IkReal x102=(gconst2*gconst24);
IkReal x103=(gconst17*gconst9);
IkReal x104=((1.0)*gconst25);
IkReal x105=(gconst15*gconst22);
IkReal x106=(gconst27*gconst9);
IkReal x107=(gconst12*gconst8);
IkReal x108=(gconst25*gconst9);
IkReal x109=(gconst2*gconst3);
IkReal x110=(gconst29*gconst5);
IkReal x111=((1.0)*gconst18);
IkReal x112=(gconst22*gconst23);
IkReal x113=((1.0)*gconst11);
IkReal x114=(gconst20*gconst28);
IkReal x115=((1.0)*gconst6);
IkReal x116=(gconst11*gconst6);
IkReal x117=(gconst18*gconst27);
IkReal x118=(gconst7*gconst9);
IkReal x119=(gconst2*gconst23);
IkReal x120=(gconst11*gconst16);
IkReal x121=(gconst1*gconst30);
IkReal x122=(gconst1*gconst5);
IkReal x123=(gconst18*gconst7);
IkReal x124=(gconst16*gconst31);
IkReal x125=(gconst13*gconst19);
IkReal x126=((1.0)*gconst5);
IkReal x127=(gconst20*gconst8);
IkReal x128=(gconst25*gconst29);
IkReal x129=(gconst17*gconst29);
IkReal x130=((1.0)*gconst14);
IkReal x131=(gconst18*gconst5);
IkReal x132=(gconst19*gconst21);
IkReal x133=(gconst25*gconst26);
IkReal x134=(gconst12*gconst25);
IkReal x135=(gconst17*gconst18);
IkReal x136=(gconst17*gconst5);
IkReal x137=(gconst26*gconst31);
IkReal x138=(gconst12*gconst5);
IkReal x139=(gconst11*gconst26);
IkReal x140=(gconst13*gconst30);
IkReal x141=(gconst29*gconst7);
IkReal x142=(gconst0*gconst28);
IkReal x143=(gconst18*gconst28);
IkReal x144=(gconst14*gconst22);
IkReal x145=(gconst31*gconst6);
IkReal x146=(gconst14*gconst2);
IkReal x147=(gconst1*gconst19);
IkReal x148=(gconst18*gconst25);
IkReal x149=(gconst11*gconst20);
IkReal x150=(gconst5*gconst9);
IkReal x151=(gconst1*gconst10);
IkReal x152=(gconst21*gconst30);
IkReal x153=(gconst20*gconst25);
IkReal x154=(gconst25*gconst6);
IkReal x155=(gconst12*gconst28);
IkReal x156=(gconst21*gconst5);
IkReal x157=(gconst8*gconst9);
IkReal x158=(gconst22*gconst3);
IkReal x159=(gconst0*gconst8);
IkReal x160=(gconst25*x100);
IkReal x161=(gconst28*x144);
IkReal x162=(gconst31*x158);
IkReal x163=(gconst22*x157);
IkReal x164=(gconst1*x154);
IkReal x165=((1.0)*x157);
op[0]=(((x112*x137))+(((-1.0)*gconst20*x133*x91))+(((-1.0)*gconst21*x104*x83))+((x114*x128))+(((-1.0)*gconst30*x90*x98))+((x83*x90))+((x133*x152))+(((-1.0)*gconst28*x100*x112)));
op[1]=((((-1.0)*gconst19*x90*x98))+(((-1.0)*gconst30*x105*x98))+((x117*x90))+((x112*x124))+(((-1.0)*gconst21*x104*x117))+((x128*x155))+((x137*x144))+(((-1.0)*gconst13*x104*x83))+(((-1.0)*gconst30*x89*x90))+((x129*x90))+(((-1.0)*gconst17*gconst21*x160))+((x132*x133))+(((-1.0)*x100*x161))+(((-1.0)*gconst12*x133*x91))+(((-1.0)*gconst28*x111*x112))+((x133*x140))+((x114*x148))+((x152*x85))+((x105*x83))+(((-1.0)*gconst20*x85*x91)));
op[2]=((((-1.0)*gconst1*x104*x83))+((x152*x96))+(((-1.0)*gconst19*x105*x98))+((x112*x139))+((x124*x144))+((x121*x133))+(((-1.0)*gconst0*x133*x91))+((x110*x114))+(((-1.0)*gconst21*x104*x106))+(((-1.0)*gconst30*x115*x90))+(((-1.0)*gconst30*x105*x89))+((x135*x90))+((x141*x90))+((x102*x83))+((x137*x158))+((x128*x142))+((x153*x88))+(((-1.0)*gconst13*gconst17*x160))+((x152*x154))+(((-1.0)*x112*x88))+(((-1.0)*gconst30*x84*x98))+((x106*x90))+((x112*x145))+((x125*x133))+(((-1.0)*gconst28*x100*x158))+((x105*x129))+((x140*x85))+(((-1.0)*gconst21*gconst7*x160))+(((-1.0)*gconst13*x104*x117))+(((-1.0)*gconst21*x126*x83))+((x134*x143))+((x133*x86))+(((-1.0)*gconst8*x100*x112))+((x83*x84))+(((-1.0)*gconst25*x149*x98))+(((-1.0)*gconst6*x153*x91))+((x132*x85))+(((-1.0)*gconst30*x102*x98))+((x105*x117))+(((-1.0)*gconst19*x89*x90))+(((-1.0)*gconst12*x85*x91))+(((-1.0)*gconst10*x90*x98))+(((-1.0)*gconst28*x100*x119))+((x119*x137))+((x127*x128))+(((-1.0)*x111*x161))+(((-1.0)*gconst20*x91*x96))+(((-1.0)*gconst21*x104*x135)));
op[3]=((((-1.0)*x160*x99))+(((-1.0)*x160*x97))+(((-1.0)*gconst19*x102*x98))+((x142*x148))+(((-1.0)*gconst6*x134*x91))+((x112*x120))+(((-1.0)*gconst10*x89*x90))+(((-1.0)*gconst8*x100*x144))+((x140*x154))+((x101*x152))+((x117*x84))+(((-1.0)*gconst21*x100*x136))+(((-1.0)*gconst0*x85*x91))+(((-1.0)*gconst13*x126*x83))+(((-1.0)*gconst30*x105*x115))+((x144*x145))+((x103*x90))+((x137*x146))+(((-1.0)*gconst27*x111*x156))+(((-1.0)*gconst30*x84*x89))+(((-1.0)*gconst20*gconst31*gconst5*x89))+(((-1.0)*gconst30*x93*x98))+(((-1.0)*gconst12*x91*x96))+((x102*x129))+(((-1.0)*gconst21*x103*x104))+((x125*x85))+((x85*x86))+((x110*x155))+((x102*x117))+((x114*x131))+((x105*x141))+(((-1.0)*gconst28*x111*x158))+((x121*x85))+((x129*x84))+((x127*x148))+(((-1.0)*gconst19*x84*x98))+(((-1.0)*gconst10*x105*x98))+((x140*x96))+(((-1.0)*gconst13*x104*x106))+(((-1.0)*gconst8*x111*x112))+(((-1.0)*gconst28*x100*x146))+((x105*x135))+(((-1.0)*gconst30*x102*x89))+((x132*x96))+(((-1.0)*gconst19*x115*x90))+((x105*x106))+(((-1.0)*gconst11*x134*x98))+((x133*x95))+(((-1.0)*gconst28*x111*x119))+(((-1.0)*gconst22*x130*x88))+((x83*x93))+(((-1.0)*gconst13*x104*x135))+((x119*x124))+(((-1.0)*gconst20*x113*x85))+((x132*x154))+((x133*x147))+((x107*x128))+((x134*x88))+(((-1.0)*gconst21*x104*x123))+(((-1.0)*gconst1*x104*x117))+(((-1.0)*gconst19*x105*x89))+((x123*x90))+((x139*x144))+((x124*x158)));
op[4]=(((gconst0*gconst25*gconst28*gconst9))+((gconst11*gconst22*gconst26*gconst3))+((gconst1*gconst10*gconst25*gconst26))+((gconst15*gconst18*gconst22*gconst7))+((gconst2*gconst27*gconst29*gconst4))+(((-1.0)*gconst16*gconst19*gconst22*gconst4))+((gconst13*gconst16*gconst30*gconst5))+(((-1.0)*gconst14*gconst18*gconst2*gconst28))+((gconst11*gconst22*gconst23*gconst6))+(((-1.0)*gconst2*gconst28*gconst29*gconst3))+((gconst13*gconst19*gconst25*gconst6))+((gconst1*gconst25*gconst30*gconst6))+((gconst0*gconst28*gconst29*gconst5))+((gconst20*gconst28*gconst5*gconst9))+((gconst21*gconst30*gconst5*gconst6))+(((-1.0)*gconst0*gconst11*gconst25*gconst26))+((gconst13*gconst19*gconst26*gconst5))+(((-1.0)*gconst11*gconst20*gconst25*gconst6))+((gconst0*gconst25*gconst29*gconst8))+(((-1.0)*gconst2*gconst26*gconst30*gconst4))+(((-1.0)*gconst10*gconst22*gconst24*gconst6))+((gconst1*gconst26*gconst30*gconst5))+(((-1.0)*gconst2*gconst24*gconst30*gconst6))+((gconst22*gconst24*gconst7*gconst9))+(((-1.0)*gconst10*gconst15*gconst16*gconst22))+((gconst22*gconst27*gconst4*gconst9))+(((-1.0)*gconst0*gconst25*gconst31*gconst6))+((gconst2*gconst23*gconst31*gconst6))+(((-1.0)*gconst21*gconst29*gconst5*gconst7))+(((-1.0)*gconst15*gconst19*gconst2*gconst26))+(((-1.0)*gconst1*gconst27*gconst29*gconst5))+((gconst14*gconst16*gconst2*gconst31))+(((-1.0)*gconst20*gconst31*gconst5*gconst6))+((gconst22*gconst29*gconst4*gconst7))+((gconst20*gconst25*gconst8*gconst9))+((gconst17*gconst18*gconst22*gconst4))+(((-1.0)*gconst1*gconst25*gconst27*gconst9))+(((-1.0)*gconst16*gconst19*gconst2*gconst24))+((gconst2*gconst24*gconst29*gconst7))+(((-1.0)*gconst14*gconst18*gconst22*gconst8))+(((-1.0)*gconst13*gconst18*gconst27*gconst5))+(((-1.0)*gconst22*gconst23*gconst8*gconst9))+(((-1.0)*gconst0*gconst26*gconst31*gconst5))+(((-1.0)*gconst21*gconst25*gconst7*gconst9))+((gconst16*gconst19*gconst21*gconst5))+(((-1.0)*gconst10*gconst22*gconst26*gconst4))+((gconst15*gconst17*gconst2*gconst29))+((gconst11*gconst14*gconst16*gconst22))+(((-1.0)*gconst17*gconst18*gconst21*gconst5))+((gconst15*gconst17*gconst22*gconst9))+(((-1.0)*gconst22*gconst28*gconst3*gconst9))+((gconst1*gconst16*gconst19*gconst25))+(((-1.0)*gconst11*gconst12*gconst16*gconst25))+(((-1.0)*gconst13*gconst17*gconst25*gconst9))+((gconst20*gconst29*gconst5*gconst8))+(((-1.0)*gconst15*gconst16*gconst2*gconst30))+((gconst2*gconst26*gconst3*gconst31))+(((-1.0)*gconst22*gconst29*gconst3*gconst8))+((gconst11*gconst2*gconst23*gconst26))+((gconst17*gconst18*gconst2*gconst24))+((gconst10*gconst21*gconst25*gconst6))+((gconst10*gconst21*gconst26*gconst5))+(((-1.0)*gconst2*gconst23*gconst29*gconst8))+((gconst2*gconst24*gconst27*gconst9))+((gconst12*gconst18*gconst25*gconst8))+(((-1.0)*gconst21*gconst27*gconst5*gconst9))+(((-1.0)*gconst13*gconst18*gconst25*gconst7))+(((-1.0)*gconst10*gconst2*gconst24*gconst26))+((gconst15*gconst18*gconst2*gconst27))+((gconst12*gconst18*gconst28*gconst5))+(((-1.0)*gconst1*gconst17*gconst18*gconst25))+(((-1.0)*gconst2*gconst23*gconst28*gconst9))+(((-1.0)*gconst15*gconst19*gconst22*gconst6))+(((-1.0)*gconst22*gconst30*gconst4*gconst6))+(((-1.0)*gconst11*gconst20*gconst26*gconst5))+(((-1.0)*gconst12*gconst16*gconst31*gconst5))+(((-1.0)*gconst13*gconst17*gconst29*gconst5))+((gconst10*gconst13*gconst16*gconst25))+((gconst22*gconst3*gconst31*gconst6))+(((-1.0)*gconst1*gconst25*gconst29*gconst7)));
op[5]=(((x127*x131))+(((-1.0)*gconst12*x113*x96))+((x151*x85))+((x107*x108))+((x101*x125))+((x101*x121))+((x117*x94))+(((-1.0)*gconst8*x100*x146))+(((-1.0)*gconst10*x93*x98))+(((-1.0)*gconst2*x130*x88))+(((-1.0)*gconst30*x115*x93))+(((-1.0)*x130*x163))+(((-1.0)*gconst10*x105*x115))+(((-1.0)*gconst9*x104*x99))+(((-1.0)*gconst9*x104*x97))+(((-1.0)*gconst1*x104*x123))+((x120*x158))+((x138*x88))+((x147*x96))+((x135*x93))+((x141*x93))+((x103*x84))+((x101*x86))+(((-1.0)*gconst12*x104*x116))+(((-1.0)*gconst12*x91*x92))+((x102*x123))+((x145*x146))+(((-1.0)*gconst30*x89*x94))+((x129*x94))+(((-1.0)*gconst7*x111*x156))+(((-1.0)*gconst19*x102*x115))+((x102*x103))+((x106*x93))+(((-1.0)*gconst5*x100*x99))+(((-1.0)*gconst5*x100*x97))+(((-1.0)*gconst31*x87*x89))+(((-1.0)*gconst5*x149*x89))+(((-1.0)*gconst21*x103*x126))+(((-1.0)*gconst13*x106*x126))+((x140*x92))+((x116*x144))+(((-1.0)*gconst10*x102*x89))+((x109*x124))+(((-1.0)*gconst10*x84*x89))+(((-1.0)*gconst8*x111*x119))+(((-1.0)*gconst19*x94*x98))+((x132*x92))+((x147*x154))+((x148*x159))+((x143*x87))+((x95*x96))+(((-1.0)*gconst19*x115*x84))+((x105*x118))+(((-1.0)*gconst19*x89*x93))+((x154*x95))+(((-1.0)*gconst28*x109*x111))+((x119*x120))+(((-1.0)*gconst27*x111*x122))+((x123*x84))+(((-1.0)*gconst0*x113*x85))+((x139*x146))+((x107*x110))+(((-1.0)*gconst8*x111*x158))+(((-1.0)*gconst13*x111*x136)));
op[6]=((((-1.0)*gconst10*x89*x93))+(((-1.0)*gconst5*x111*x97))+(((-1.0)*gconst5*x111*x99))+((x120*x146))+(((-1.0)*gconst30*x115*x94))+(((-1.0)*x158*x165))+(((-1.0)*gconst7*x100*x122))+((x101*x147))+(((-1.0)*gconst10*x115*x84))+((x135*x94))+((x141*x94))+((x125*x92))+((x103*x93))+((x101*x95))+((x86*x92))+((x102*x118))+(((-1.0)*x109*x88))+((x151*x154))+((x106*x94))+(((-1.0)*gconst0*x104*x116))+(((-1.0)*gconst21*x118*x126))+((x116*x158))+(((-1.0)*gconst11*x138*x89))+((x109*x139))+(((-1.0)*gconst6*x87*x91))+((x121*x92))+((x127*x150))+(((-1.0)*gconst11*x87*x98))+((x118*x84))+(((-1.0)*gconst10*x94*x98))+(((-1.0)*gconst19*x115*x93))+((x109*x145))+(((-1.0)*x119*x165))+(((-1.0)*gconst10*x102*x115))+((x116*x119))+(((-1.0)*x106*x122))+(((-1.0)*gconst20*x113*x92))+(((-1.0)*gconst8*x100*x109))+(((-1.0)*gconst19*x89*x94))+((x107*x131))+((x108*x159))+(((-1.0)*gconst8*x111*x146))+(((-1.0)*gconst1*x104*x118))+((x123*x93))+((x151*x96))+(((-1.0)*gconst13*x103*x126))+((gconst29*gconst8*x87))+((x87*x88)));
op[7]=((((-1.0)*gconst12*x113*x92))+(((-1.0)*gconst8*x109*x111))+(((-1.0)*gconst10*x89*x94))+(((-1.0)*gconst2*x130*x157))+((x101*x151))+((x92*x95))+((x147*x92))+((x107*x150))+(((-1.0)*gconst10*x115*x93))+((x103*x94))+(((-1.0)*gconst7*x111*x122))+(((-1.0)*gconst9*x126*x99))+(((-1.0)*gconst9*x126*x97))+((gconst18*gconst8*x87))+((x116*x146))+((x109*x120))+((x118*x93))+(((-1.0)*gconst19*x115*x94))+(((-1.0)*gconst11*x87*x89))+((x123*x94)));
op[8]=(((x157*x87))+(((-1.0)*x118*x122))+(((-1.0)*gconst10*x115*x94))+((x109*x116))+(((-1.0)*gconst6*x113*x87))+((x118*x94))+(((-1.0)*x109*x165))+((x151*x92)));
polyroots8(op,zeror,numroots);
IkReal j1array[8], cj1array[8], sj1array[8], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[8]={true,true,true,true,true,true,true,true};
_nj1 = 8;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((((0.000799999744000123)*r02))+(((0.999999680000154)*r00*sj0))+(((-0.999999680000154)*cj0*r01)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j3eval[2];
j3eval[0]=sj4;
j3eval[1]=IKsign(sj4);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=sj4;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x166=((0.00503144493081838)*cj1);
IkReal x167=((6.28930817610063)*sj1);
cj3array[0]=((-0.14507299270073)+((px*sj0*x166))+(((5.73841986870495)*(py*py)))+((cj0*px*x167))+(((5.73841986870495)*(px*px)))+(((-1.0)*cj0*py*x166))+((py*sj0*x167))+(((-6.28930616352298)*cj1*pz))+(((5.73841986870495)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x168=pz*pz;
IkReal x169=px*px;
IkReal x170=py*py;
IkReal x171=(cj0*r01);
IkReal x172=(r00*sj0);
IkReal x173=(py*r00);
IkReal x174=((1.09599964928017)*sj1);
IkReal x175=(px*r02);
IkReal x176=((1.096)*cj1);
IkReal x177=((0.000799999744000123)*r02);
IkReal x178=(py*pz);
IkReal x179=((1.99999936000031)*cj0);
IkReal x180=((0.000876799719424135)*sj1);
IkReal x181=(r01*sj0);
IkReal x182=(pz*r00);
IkReal x183=(py*r02);
IkReal x184=((0.999999680000154)*x170);
IkReal x185=(pz*x176);
IkReal x186=((0.999999680000154)*x169);
IkReal x187=((0.999999680000154)*x168);
evalcond[0]=((0.325585)+(((-0.000240243123122213)*r02))+(((0.174264)*(IKcos(j3))))+(((-1.0)*r02*x178*x179))+(((-1.0)*cj0*x175*x180))+((x172*x185))+((x172*x186))+((x168*x177))+((px*r01*x174))+((cj0*x180*x182))+(((1.99999936000031)*px*py*x181))+(((-1.0)*x171*x184))+(((-1.0)*x171*x185))+(((-1.0)*sj0*x180*x183))+(((-1.0)*x170*x177))+((cj0*x176*x183))+((x171*x187))+((x171*x186))+(((0.00159999948800025)*px*x182))+(((-1.0)*px*x173*x179))+(((-1.0)*x169*x177))+(((-0.300303903902766)*x172))+(((0.300303903902766)*x171))+(((-1.0)*x172*x184))+(((-1.0)*x172*x187))+(((1.99999936000031)*pz*sj0*x175))+(((-1.0)*sj0*x175*x176))+((pz*x180*x181))+(((-1.0)*x173*x174))+(((0.00159999948800025)*r01*x178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=0;
cj4=1.0;
j4=0;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x188=(cj1*px);
IkReal x189=((548000.0)*cj0);
IkReal x190=((438.399859712067)*sj0);
IkReal x191=(cj1*pz);
IkReal x192=(px*sj1);
IkReal x193=((158999.949120024)*sj3);
IkReal x194=(cj0*py);
IkReal x195=((127.19995929602)*sj3);
IkReal x196=(pz*sj1);
IkReal x197=(cj3*sj0);
IkReal x198=((159000.0)*sj3);
IkReal x199=(py*sj1);
IkReal x200=((158999.949120024)*cj3);
IkReal x201=(cj1*py);
IkReal x202=((548000.0)*sj0);
IkReal x203=((127.19995929602)*cj3);
IkReal x204=((159000.0)*cj0*cj3);
CheckValue<IkReal> x205 = IKatan2WithCheck(IkReal(((((-1.0)*x188*x189))+(((87132.0)*sj3))+(((-1.0)*x201*x202))+(((-547999.824640084)*x196))+((sj0*x188*x195))+(((-1.0)*x191*x193))+(((127.19995929602)*x192*x197))+(((-438.399859712067)*sj1*x194))+(((-1.0)*cj1*x194*x195))+(((-159000.0)*x197*x201))+((cj0*x192*x198))+((x190*x192))+(((-1.0)*x196*x200))+((sj0*x198*x199))+(((-1.0)*x188*x204))+(((-1.0)*sj1*x194*x203)))),IkReal(((-300304.0)+(((-159000.0)*x197*x199))+(((-1.0)*cj0*x188*x198))+(((-1.0)*x188*x190))+(((-87132.0)*cj3))+(((-1.0)*x192*x204))+((sj0*x192*x195))+(((-1.0)*x189*x192))+(((-1.0)*sj0*x198*x201))+((x191*x200))+(((547999.824640084)*x191))+(((438.399859712067)*cj1*x194))+(((-1.0)*x199*x202))+(((-127.19995929602)*x188*x197))+((cj1*x194*x203))+(((-1.0)*x193*x196))+(((-1.0)*sj1*x194*x195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x205.valid){
continue;
}
CheckValue<IkReal> x206=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x206.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x205.value)+(((1.5707963267949)*(x206.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x207=IKcos(j2);
IkReal x208=IKsin(j2);
IkReal x209=(r00*sj0);
IkReal x210=((0.000799999744000123)*r02);
IkReal x211=((0.999999680000154)*sj1);
IkReal x212=(py*r00);
IkReal x213=(py*sj1);
IkReal x214=((1.0)*r02);
IkReal x215=((0.000799999744000123)*cj0);
IkReal x216=(pz*sj1);
IkReal x217=((0.000799999744000123)*sj0);
IkReal x218=(cj1*pz);
IkReal x219=((0.159)*sj3);
IkReal x220=(cj0*r01);
IkReal x221=(px*sj1);
IkReal x222=(px*r01);
IkReal x223=((0.159)*cj3);
IkReal x224=(cj0*cj1);
IkReal x225=((0.999999680000154)*cj1);
IkReal x226=((0.548)*x208);
IkReal x227=((0.548)*x207);
IkReal x228=(cj0*x221);
IkReal x229=(cj1*px*sj0);
IkReal x230=(cj1*py*sj0);
IkReal x231=(x207*x219);
IkReal x232=(x208*x223);
IkReal x233=(x208*x219);
IkReal x234=(x207*x223);
IkReal x235=(x227+x234);
IkReal x236=(x226+x232+x231);
evalcond[0]=((0.548)+(((-1.0)*x233))+x228+x235+((sj0*x213))+(((-1.0)*cj1*py*x215))+((cj1*px*x217))+(((-0.999999680000154)*x218)));
evalcond[1]=((((-1.0)*pz*x211))+(((-1.0)*px*x224))+(((-1.0)*x236))+((x217*x221))+(((-1.0)*x213*x215))+(((-1.0)*x230)));
evalcond[2]=(((r00*x215*x218))+(((-1.0)*x209*x216))+((x216*x220))+((x222*x225))+(((-1.0)*x210*x230))+(((-1.0)*x236))+((r02*sj0*x221))+(((-1.0)*px*x210*x224))+(((-1.0)*x212*x225))+(((-1.0)*cj0*x213*x214))+((r01*x217*x218)));
evalcond[3]=(((r00*x215*x216))+((r01*x216*x217))+(((-1.0)*x214*x229))+(((-0.547999824640084)*x209))+((x209*x218))+(((-1.0)*x235))+x233+((py*r02*x224))+(((-1.0)*x218*x220))+(((-1.0)*x211*x212))+(((-0.000438399859712067)*r02))+(((-1.0)*sj0*x210*x213))+(((0.547999824640084)*x220))+((x211*x222))+(((-1.0)*x210*x228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x237=((0.00503144493081838)*cj1);
IkReal x238=((6.28930817610063)*sj1);
cj3array[0]=((-0.14507299270073)+(((5.73841986870495)*(py*py)))+((py*sj0*x238))+((px*sj0*x237))+(((5.73841986870495)*(px*px)))+(((-1.0)*cj0*py*x237))+(((-6.28930616352298)*cj1*pz))+((cj0*px*x238))+(((5.73841986870495)*(pz*pz))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[1];
IkReal x239=pz*pz;
IkReal x240=px*px;
IkReal x241=py*py;
IkReal x242=(cj0*r01);
IkReal x243=(r00*sj0);
IkReal x244=(py*r00);
IkReal x245=((1.09599964928017)*sj1);
IkReal x246=(px*r02);
IkReal x247=((1.096)*cj1);
IkReal x248=((0.000799999744000123)*r02);
IkReal x249=(py*pz);
IkReal x250=((1.99999936000031)*cj0);
IkReal x251=((0.000876799719424135)*sj1);
IkReal x252=(r01*sj0);
IkReal x253=(pz*r00);
IkReal x254=(py*r02);
IkReal x255=((0.999999680000154)*x241);
IkReal x256=(pz*x247);
IkReal x257=((0.999999680000154)*x240);
IkReal x258=((0.999999680000154)*x239);
evalcond[0]=((-0.325585)+(((1.99999936000031)*px*py*x252))+(((1.99999936000031)*pz*sj0*x246))+((x242*x258))+((x242*x257))+(((0.300303903902766)*x242))+((px*r01*x245))+(((-0.000240243123122213)*r02))+((cj0*x247*x254))+((pz*x251*x252))+(((-1.0)*x242*x256))+(((-1.0)*x242*x255))+(((0.00159999948800025)*r01*x249))+(((-1.0)*r02*x249*x250))+(((-0.300303903902766)*x243))+(((-1.0)*sj0*x246*x247))+(((-1.0)*cj0*x246*x251))+((x243*x257))+((x243*x256))+((x239*x248))+(((-1.0)*x241*x248))+(((-1.0)*sj0*x251*x254))+(((-1.0)*px*x244*x250))+(((-1.0)*x240*x248))+(((-0.174264)*(IKcos(j3))))+((cj0*x251*x253))+(((-1.0)*x243*x258))+(((-1.0)*x243*x255))+(((-1.0)*x244*x245))+(((0.00159999948800025)*px*x253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x259=(cj1*px);
IkReal x260=((548000.0)*cj0);
IkReal x261=((438.399859712067)*sj0);
IkReal x262=(cj1*pz);
IkReal x263=(px*sj1);
IkReal x264=((158999.949120024)*sj3);
IkReal x265=(cj0*py);
IkReal x266=((127.19995929602)*sj3);
IkReal x267=(pz*sj1);
IkReal x268=(cj3*sj0);
IkReal x269=((159000.0)*sj3);
IkReal x270=(py*sj1);
IkReal x271=((158999.949120024)*cj3);
IkReal x272=(cj1*py);
IkReal x273=((548000.0)*sj0);
IkReal x274=((127.19995929602)*cj3);
IkReal x275=((159000.0)*cj0*cj3);
CheckValue<IkReal> x276=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((((-1.0)*x262*x264))+(((-1.0)*x272*x273))+(((87132.0)*sj3))+(((-1.0)*cj1*x265*x266))+((cj0*x263*x269))+((sj0*x269*x270))+(((-1.0)*x259*x275))+(((-547999.824640084)*x267))+(((-1.0)*x259*x260))+((sj0*x259*x266))+((x261*x263))+(((-1.0)*x267*x271))+(((-159000.0)*x268*x272))+(((-1.0)*sj1*x265*x274))+(((127.19995929602)*x263*x268))+(((-438.399859712067)*sj1*x265)))),IkReal(((-300304.0)+((cj1*x265*x274))+(((-87132.0)*cj3))+(((-1.0)*x263*x275))+(((-1.0)*cj0*x259*x269))+(((-1.0)*x259*x261))+(((547999.824640084)*x262))+((x262*x271))+(((-1.0)*sj0*x269*x272))+(((-1.0)*sj1*x265*x266))+(((-1.0)*x270*x273))+(((438.399859712067)*cj1*x265))+(((-1.0)*x264*x267))+(((-159000.0)*x268*x270))+(((-127.19995929602)*x259*x268))+(((-1.0)*x260*x263))+((sj0*x263*x266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x276.value)))+(x277.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x278=IKcos(j2);
IkReal x279=IKsin(j2);
IkReal x280=(r00*sj0);
IkReal x281=((0.000799999744000123)*r02);
IkReal x282=((0.999999680000154)*sj1);
IkReal x283=(py*r00);
IkReal x284=(py*sj1);
IkReal x285=((1.0)*r02);
IkReal x286=((0.000799999744000123)*cj0);
IkReal x287=(pz*sj1);
IkReal x288=((0.000799999744000123)*sj0);
IkReal x289=(cj1*pz);
IkReal x290=((0.159)*sj3);
IkReal x291=(cj0*r01);
IkReal x292=(px*sj1);
IkReal x293=(px*r01);
IkReal x294=((0.159)*cj3);
IkReal x295=(cj0*cj1);
IkReal x296=((0.999999680000154)*cj1);
IkReal x297=((0.548)*x279);
IkReal x298=((0.548)*x278);
IkReal x299=(cj0*x292);
IkReal x300=(cj1*px*sj0);
IkReal x301=(cj1*py*sj0);
IkReal x302=(x278*x290);
IkReal x303=(x279*x294);
IkReal x304=(x278*x294);
IkReal x305=(x279*x290);
IkReal x306=(x304+x298);
IkReal x307=(x302+x303+x297);
evalcond[0]=((0.548)+(((-1.0)*cj1*py*x286))+x306+x299+((sj0*x284))+((cj1*px*x288))+(((-1.0)*x305))+(((-0.999999680000154)*x289)));
evalcond[1]=((((-1.0)*px*x295))+(((-1.0)*x301))+(((-1.0)*x284*x286))+(((-1.0)*pz*x282))+(((-1.0)*x307))+((x288*x292)));
evalcond[2]=((((-1.0)*cj0*x284*x285))+(((-1.0)*x280*x287))+((r00*x286*x289))+(((-1.0)*px*x281*x295))+((x287*x291))+x307+(((-1.0)*x281*x301))+(((-1.0)*x283*x296))+((r01*x288*x289))+((x293*x296))+((r02*sj0*x292)));
evalcond[3]=((((-0.547999824640084)*x280))+((r00*x286*x287))+(((-1.0)*x289*x291))+(((-1.0)*sj0*x281*x284))+(((0.547999824640084)*x291))+((x282*x293))+(((-1.0)*x285*x300))+x306+(((-1.0)*x282*x283))+((py*r02*x295))+(((-0.000438399859712067)*r02))+((x280*x289))+((r01*x287*x288))+(((-1.0)*x281*x299))+(((-1.0)*x305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x308=(cj0*cj1);
IkReal x309=((137.0)*sj1);
IkReal x310=(cj1*sj0);
IkReal x311=((6.28930817610063)*sj1);
CheckValue<IkReal> x312=IKPowWithIntegerCheck(sj4,-1);
if(!x312.valid){
continue;
}
if( IKabs(((0.0072992700729927)*(x312.value)*(((((250.0)*px*r00))+((cj0*r00*x309))+(((-136.999956160021)*cj1*r02))+((r01*sj0*x309))+(((0.109599964928017)*r00*x310))+(((250.0)*py*r01))+(((250.0)*pz*r02))+(((-0.109599964928017)*r01*x308)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.14507299270073)+(((-0.00503144493081838)*py*x308))+((cj0*px*x311))+(((5.73841986870495)*(py*py)))+(((0.00503144493081838)*px*x310))+(((5.73841986870495)*(px*px)))+(((-6.28930616352298)*cj1*pz))+(((5.73841986870495)*(pz*pz)))+((py*sj0*x311)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.0072992700729927)*(x312.value)*(((((250.0)*px*r00))+((cj0*r00*x309))+(((-136.999956160021)*cj1*r02))+((r01*sj0*x309))+(((0.109599964928017)*r00*x310))+(((250.0)*py*r01))+(((250.0)*pz*r02))+(((-0.109599964928017)*r01*x308))))))+IKsqr(((-0.14507299270073)+(((-0.00503144493081838)*py*x308))+((cj0*px*x311))+(((5.73841986870495)*(py*py)))+(((0.00503144493081838)*px*x310))+(((5.73841986870495)*(px*px)))+(((-6.28930616352298)*cj1*pz))+(((5.73841986870495)*(pz*pz)))+((py*sj0*x311))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((0.0072992700729927)*(x312.value)*(((((250.0)*px*r00))+((cj0*r00*x309))+(((-136.999956160021)*cj1*r02))+((r01*sj0*x309))+(((0.109599964928017)*r00*x310))+(((250.0)*py*r01))+(((250.0)*pz*r02))+(((-0.109599964928017)*r01*x308))))), ((-0.14507299270073)+(((-0.00503144493081838)*py*x308))+((cj0*px*x311))+(((5.73841986870495)*(py*py)))+(((0.00503144493081838)*px*x310))+(((5.73841986870495)*(px*px)))+(((-6.28930616352298)*cj1*pz))+(((5.73841986870495)*(pz*pz)))+((py*sj0*x311))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x313=IKcos(j3);
IkReal x314=pz*pz;
IkReal x315=px*px;
IkReal x316=py*py;
IkReal x317=(cj0*r01);
IkReal x318=(r00*sj0);
IkReal x319=(cj1*pz);
IkReal x320=(py*sj1);
IkReal x321=((1.096)*sj0);
IkReal x322=(px*r01);
IkReal x323=(pz*r01);
IkReal x324=(cj0*px);
IkReal x325=((0.999999680000154)*r02);
IkReal x326=(py*r00);
IkReal x327=(px*r02);
IkReal x328=((1.99999936000031)*sj0);
IkReal x329=(r02*sj1);
IkReal x330=((0.000438399859712067)*cj1);
IkReal x331=((0.548)*sj4);
IkReal x332=((0.000799999744000123)*r02);
IkReal x333=(cj0*py);
IkReal x334=((0.000876799719424135)*cj1);
IkReal x335=((0.000876799719424135)*sj1);
IkReal x336=(pz*r02);
IkReal x337=(cj1*r02);
IkReal x338=(cj0*r00);
IkReal x339=((0.000438399859712067)*sj1);
IkReal x340=(px*r00);
IkReal x341=((0.999999680000154)*x316);
IkReal x342=((0.174264)*x313);
IkReal x343=((0.999999680000154)*x315);
IkReal x344=((0.548)*r01*sj0);
IkReal x345=((0.999999680000154)*x314);
evalcond[0]=((((-0.548)*sj1*x338))+(((-1.0)*x318*x330))+(((0.547999824640084)*x337))+((x317*x330))+(((-1.0)*x336))+(((-1.0)*py*r01))+((x331*(IKsin(j3))))+(((-1.0)*sj1*x344))+(((-1.0)*x340)));
evalcond[1]=((0.025281)+(((1.09599964928017)*x319))+(((-1.0)*x320*x321))+x342+((x333*x334))+(((-1.0)*x314))+(((-1.0)*x316))+(((-1.0)*x315))+(((-1.096)*sj1*x324))+(((-1.0)*px*sj0*x334)));
evalcond[2]=((((-1.0)*x318*x339))+(((0.548)*cj1*x338))+((cj1*x344))+(((-0.999999680000154)*pz*x338))+(((0.000799999744000123)*x322))+((x317*x339))+((x324*x325))+(((-0.999999680000154)*sj0*x323))+((py*sj0*x325))+(((0.547999824640084)*x329))+(((0.159)*sj4))+(((-0.000799999744000123)*x326))+((x313*x331)));
evalcond[3]=((((-1.0)*x317*x341))+(((1.096)*x333*x337))+((x318*x343))+(((1.096)*x318*x319))+(((-1.09599964928017)*r00*x320))+(((-0.000240243123122213)*r02))+(((0.00159999948800025)*pz*x340))+(((-1.99999936000031)*x324*x326))+(((-1.99999936000031)*x333*x336))+(((0.00159999948800025)*py*x323))+(((0.325585)*cj4))+(((1.09599964928017)*sj1*x322))+(((-0.300303903902766)*x318))+(((-1.0)*x316*x332))+((pz*x327*x328))+(((-1.096)*x317*x319))+((py*x322*x328))+((cj4*x342))+(((-1.0)*x315*x332))+(((-1.0)*x318*x341))+(((-1.0)*x318*x345))+(((-1.0)*cj1*x321*x327))+(((0.300303903902766)*x317))+((x314*x332))+((pz*x335*x338))+(((-0.000876799719424135)*r02*sj0*x320))+((sj0*x323*x335))+((x317*x343))+((x317*x345))+(((-0.000876799719424135)*x324*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj4;
j2eval[1]=IKsign(sj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x346=(cj3*sj4);
j2eval[0]=(sj4+(((3.44654088050314)*x346)));
j2eval[1]=IKsign(((((159.0)*sj4))+(((548.0)*x346))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=0;
cj4=1.0;
j4=0;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x347=(cj1*px);
IkReal x348=((548000.0)*cj0);
IkReal x349=((438.399859712067)*sj0);
IkReal x350=(cj1*pz);
IkReal x351=(px*sj1);
IkReal x352=((158999.949120024)*sj3);
IkReal x353=(cj0*py);
IkReal x354=((127.19995929602)*sj3);
IkReal x355=(pz*sj1);
IkReal x356=(cj3*sj0);
IkReal x357=((159000.0)*sj3);
IkReal x358=(py*sj1);
IkReal x359=((158999.949120024)*cj3);
IkReal x360=(cj1*py);
IkReal x361=((548000.0)*sj0);
IkReal x362=((127.19995929602)*cj3);
IkReal x363=((159000.0)*cj0*cj3);
CheckValue<IkReal> x364=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x364.valid){
continue;
}
CheckValue<IkReal> x365 = IKatan2WithCheck(IkReal(((((127.19995929602)*x351*x356))+(((87132.0)*sj3))+(((-1.0)*x347*x363))+(((-547999.824640084)*x355))+(((-1.0)*x360*x361))+((sj0*x357*x358))+((sj0*x347*x354))+(((-438.399859712067)*sj1*x353))+(((-1.0)*x347*x348))+((x349*x351))+(((-159000.0)*x356*x360))+(((-1.0)*cj1*x353*x354))+(((-1.0)*x355*x359))+((cj0*x351*x357))+(((-1.0)*sj1*x353*x362))+(((-1.0)*x350*x352)))),IkReal(((-300304.0)+(((-127.19995929602)*x347*x356))+(((438.399859712067)*cj1*x353))+(((-87132.0)*cj3))+(((-159000.0)*x356*x358))+(((-1.0)*x348*x351))+(((-1.0)*cj0*x347*x357))+(((-1.0)*x358*x361))+(((-1.0)*sj1*x353*x354))+(((547999.824640084)*x350))+((cj1*x353*x362))+(((-1.0)*x347*x349))+((sj0*x351*x354))+((x350*x359))+(((-1.0)*x352*x355))+(((-1.0)*sj0*x357*x360))+(((-1.0)*x351*x363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x365.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x364.value)))+(x365.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x366=IKcos(j2);
IkReal x367=IKsin(j2);
IkReal x368=(r00*sj0);
IkReal x369=((0.000799999744000123)*r02);
IkReal x370=((0.999999680000154)*sj1);
IkReal x371=(py*r00);
IkReal x372=(py*sj1);
IkReal x373=((1.0)*r02);
IkReal x374=((0.000799999744000123)*cj0);
IkReal x375=(pz*sj1);
IkReal x376=((0.000799999744000123)*sj0);
IkReal x377=(cj1*pz);
IkReal x378=((0.159)*sj3);
IkReal x379=(cj0*r01);
IkReal x380=(px*sj1);
IkReal x381=(px*r01);
IkReal x382=((0.159)*cj3);
IkReal x383=(cj0*cj1);
IkReal x384=((0.999999680000154)*cj1);
IkReal x385=((0.548)*x367);
IkReal x386=((0.548)*x366);
IkReal x387=(cj0*x380);
IkReal x388=(cj1*px*sj0);
IkReal x389=(cj1*py*sj0);
IkReal x390=(x366*x378);
IkReal x391=(x367*x382);
IkReal x392=(x367*x378);
IkReal x393=(x366*x382);
IkReal x394=(x386+x393);
IkReal x395=(x385+x391+x390);
evalcond[0]=((0.548)+(((-1.0)*x392))+((cj1*px*x376))+((sj0*x372))+x387+x394+(((-1.0)*cj1*py*x374))+(((-0.999999680000154)*x377)));
evalcond[1]=(((x376*x380))+(((-1.0)*x395))+(((-1.0)*x372*x374))+(((-1.0)*px*x383))+(((-1.0)*x389))+(((-1.0)*pz*x370)));
evalcond[2]=((((-1.0)*px*x369*x383))+(((-1.0)*x395))+((x375*x379))+(((-1.0)*x369*x389))+((r02*sj0*x380))+((r01*x376*x377))+(((-1.0)*x371*x384))+(((-1.0)*cj0*x372*x373))+((x381*x384))+((r00*x374*x377))+(((-1.0)*x368*x375)));
evalcond[3]=((((-1.0)*x373*x388))+(((-0.547999824640084)*x368))+(((-1.0)*x377*x379))+(((-1.0)*x394))+((py*r02*x383))+(((-1.0)*x370*x371))+(((-1.0)*x369*x387))+((x370*x381))+x392+((r01*x375*x376))+(((-0.000438399859712067)*r02))+((x368*x377))+(((0.547999824640084)*x379))+(((-1.0)*sj0*x369*x372))+((r00*x374*x375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x396=(cj1*px);
IkReal x397=((548000.0)*cj0);
IkReal x398=((438.399859712067)*sj0);
IkReal x399=(cj1*pz);
IkReal x400=(px*sj1);
IkReal x401=((158999.949120024)*sj3);
IkReal x402=(cj0*py);
IkReal x403=((127.19995929602)*sj3);
IkReal x404=(pz*sj1);
IkReal x405=(cj3*sj0);
IkReal x406=((159000.0)*sj3);
IkReal x407=(py*sj1);
IkReal x408=((158999.949120024)*cj3);
IkReal x409=(cj1*py);
IkReal x410=((548000.0)*sj0);
IkReal x411=((127.19995929602)*cj3);
IkReal x412=((159000.0)*cj0*cj3);
CheckValue<IkReal> x413 = IKatan2WithCheck(IkReal(((((-1.0)*sj1*x402*x411))+(((87132.0)*sj3))+(((-1.0)*cj1*x402*x403))+(((-547999.824640084)*x404))+(((-159000.0)*x405*x409))+(((-1.0)*x404*x408))+(((-1.0)*x399*x401))+((sj0*x406*x407))+((cj0*x400*x406))+(((-1.0)*x396*x397))+(((-1.0)*x396*x412))+(((127.19995929602)*x400*x405))+(((-438.399859712067)*sj1*x402))+((x398*x400))+((sj0*x396*x403))+(((-1.0)*x409*x410)))),IkReal(((-300304.0)+((sj0*x400*x403))+(((-1.0)*sj1*x402*x403))+(((-87132.0)*cj3))+((cj1*x402*x411))+(((-127.19995929602)*x396*x405))+(((-1.0)*x401*x404))+(((-1.0)*x400*x412))+(((-159000.0)*x405*x407))+(((438.399859712067)*cj1*x402))+(((-1.0)*x396*x398))+(((-1.0)*x397*x400))+(((-1.0)*x407*x410))+(((547999.824640084)*x399))+((x399*x408))+(((-1.0)*cj0*x396*x406))+(((-1.0)*sj0*x406*x409)))),IKFAST_ATAN2_MAGTHRESH);
if(!x413.valid){
continue;
}
CheckValue<IkReal> x414=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x414.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x413.value)+(((1.5707963267949)*(x414.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x415=IKcos(j2);
IkReal x416=IKsin(j2);
IkReal x417=(r00*sj0);
IkReal x418=((0.000799999744000123)*r02);
IkReal x419=((0.999999680000154)*sj1);
IkReal x420=(py*r00);
IkReal x421=(py*sj1);
IkReal x422=((1.0)*r02);
IkReal x423=((0.000799999744000123)*cj0);
IkReal x424=(pz*sj1);
IkReal x425=((0.000799999744000123)*sj0);
IkReal x426=(cj1*pz);
IkReal x427=((0.159)*sj3);
IkReal x428=(cj0*r01);
IkReal x429=(px*sj1);
IkReal x430=(px*r01);
IkReal x431=((0.159)*cj3);
IkReal x432=(cj0*cj1);
IkReal x433=((0.999999680000154)*cj1);
IkReal x434=((0.548)*x416);
IkReal x435=((0.548)*x415);
IkReal x436=(cj0*x429);
IkReal x437=(cj1*px*sj0);
IkReal x438=(cj1*py*sj0);
IkReal x439=(x415*x427);
IkReal x440=(x416*x431);
IkReal x441=(x415*x431);
IkReal x442=(x416*x427);
IkReal x443=(x435+x441);
IkReal x444=(x439+x434+x440);
evalcond[0]=((0.548)+(((-1.0)*x442))+(((-0.999999680000154)*x426))+(((-1.0)*cj1*py*x423))+x436+x443+((cj1*px*x425))+((sj0*x421)));
evalcond[1]=((((-1.0)*x444))+(((-1.0)*x421*x423))+((x425*x429))+(((-1.0)*x438))+(((-1.0)*px*x432))+(((-1.0)*pz*x419)));
evalcond[2]=(((x424*x428))+(((-1.0)*x420*x433))+((r00*x423*x426))+(((-1.0)*px*x418*x432))+(((-1.0)*x417*x424))+x444+((x430*x433))+((r01*x425*x426))+(((-1.0)*cj0*x421*x422))+((r02*sj0*x429))+(((-1.0)*x418*x438)));
evalcond[3]=((((-1.0)*x442))+(((-1.0)*x426*x428))+(((0.547999824640084)*x428))+((r00*x423*x424))+(((-0.547999824640084)*x417))+((x419*x430))+x443+((r01*x424*x425))+(((-1.0)*x419*x420))+(((-0.000438399859712067)*r02))+(((-1.0)*sj0*x418*x421))+(((-1.0)*x422*x437))+((py*r02*x432))+(((-1.0)*x418*x436))+((x417*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x445=(py*sj1);
IkReal x446=((0.00113154136350795)*cj0);
IkReal x447=((1.41442670438494)*pz);
IkReal x448=((1.41442715700141)*sj0);
IkReal x449=(cj1*py);
IkReal x450=((0.00113154136350795)*px*sj0);
IkReal x451=((1.41442715700141)*cj0*px);
if( IKabs(((((-1.0)*x445*x446))+(((-1.0)*cj1*x451))+((sj1*x450))+(((-1.0)*x448*x449))+(((-1.0)*sj1*x447)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.775106082036775)+((x446*x449))+(((-1.0)*x445*x448))+((cj1*x447))+(((-1.0)*cj1*x450))+(((-1.0)*sj1*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x445*x446))+(((-1.0)*cj1*x451))+((sj1*x450))+(((-1.0)*x448*x449))+(((-1.0)*sj1*x447))))+IKsqr(((-0.775106082036775)+((x446*x449))+(((-1.0)*x445*x448))+((cj1*x447))+(((-1.0)*cj1*x450))+(((-1.0)*sj1*x451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x445*x446))+(((-1.0)*cj1*x451))+((sj1*x450))+(((-1.0)*x448*x449))+(((-1.0)*sj1*x447))), ((-0.775106082036775)+((x446*x449))+(((-1.0)*x445*x448))+((cj1*x447))+(((-1.0)*cj1*x450))+(((-1.0)*sj1*x451))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x452=IKcos(j2);
IkReal x453=IKsin(j2);
IkReal x454=pz*pz;
IkReal x455=py*py;
IkReal x456=px*px;
IkReal x457=(pz*sj1);
IkReal x458=(py*sj0);
IkReal x459=(cj0*r00);
IkReal x460=(cj1*px);
IkReal x461=(cj0*r02);
IkReal x462=((2.0)*px);
IkReal x463=((0.000799999744000123)*sj1);
IkReal x464=(cj0*py);
IkReal x465=((0.999999680000154)*r02);
IkReal x466=(pz*r00);
IkReal x467=(cj1*sj0);
IkReal x468=(px*r00);
IkReal x469=(cj0*r01);
IkReal x470=(r00*sj0);
IkReal x471=((0.000799999744000123)*cj1);
IkReal x472=((1.09599964928017)*pz);
IkReal x473=((0.000240243123122213)*sj1);
IkReal x474=(cj1*py);
IkReal x475=(r02*sj0);
IkReal x476=(px*sj1);
IkReal x477=((0.00159999948800025)*pz);
IkReal x478=((0.999999680000154)*r01);
IkReal x479=((0.707)*cj4);
IkReal x480=((0.000799999744000123)*pz);
IkReal x481=((0.999999680000154)*r00);
IkReal x482=(py*sj1);
IkReal x483=((1.99999936000031)*r01);
IkReal x484=((0.00159999948800025)*py);
IkReal x485=((0.300303903902766)*r02);
IkReal x486=(cj1*pz);
IkReal x487=((2.0)*r02);
IkReal x488=((1.0)*r01);
IkReal x489=((0.000799999744000123)*r00);
IkReal x490=((1.0)*cj1);
IkReal x491=(r01*sj0*sj1);
IkReal x492=((1.0)*x455);
IkReal x493=(sj1*x454);
IkReal x494=(sj1*x456);
IkReal x495=((1.0)*x454);
IkReal x496=(cj1*x455);
IkReal x497=(sj1*x455);
IkReal x498=(sj4*x453);
IkReal x499=(sj4*x452);
IkReal x500=(cj1*x456);
evalcond[0]=(((x467*x489))+(((-1.0)*x469*x471))+(((-1.0)*cj1*x465))+x498+x491+((sj1*x459)));
evalcond[1]=((0.548)+(((0.707)*x452))+(((-0.999999680000154)*x486))+(((-1.0)*x464*x471))+((sj1*x458))+(((0.000799999744000123)*sj0*x460))+((cj0*x476)));
evalcond[2]=((((-1.0)*x467*x488))+(((-1.0)*x463*x469))+((x463*x470))+(((-1.0)*sj1*x465))+x499+(((-1.0)*x459*x490)));
evalcond[3]=(((px*sj0*x463))+(((-1.0)*x463*x464))+(((-1.0)*cj0*x460))+(((-0.707)*x453))+(((-1.0)*x458*x490))+(((-0.999999680000154)*x457)));
evalcond[4]=((((-1.0)*x457*x470))+(((-1.0)*x461*x482))+(((-0.000799999744000123)*x460*x461))+(((-1.0)*x474*x481))+((x460*x478))+(((-1.0)*x453*x479))+(((-1.0)*r02*x458*x471))+((pz*x459*x471))+((x475*x476))+((x457*x469))+((r01*x467*x480)));
evalcond[5]=((((-1.0)*x469*x486))+((x466*x467))+(((-1.0)*px*x461*x463))+(((-1.0)*x452*x479))+(((-1.0)*x481*x482))+(((0.547999824640084)*x469))+(((-1.0)*r02*x458*x463))+(((-0.000438399859712067)*r02))+(((-1.0)*x460*x475))+((x476*x478))+((x461*x474))+(((0.000799999744000123)*x457*x459))+(((-0.547999824640084)*x470))+(((0.000799999744000123)*r01*sj0*x457)));
evalcond[6]=(((x456*x491))+(((-1.0)*x460*x475*x477))+(((-1.0)*sj0*x488*x497))+(((0.000240243123122213)*cj1*x469))+(((-1.0)*x457*x458*x487))+(((-0.000240243123122213)*r00*x467))+(((1.99999936000031)*x460*x466))+((x459*x497))+((x459*x493))+(((-1.0)*x465*x496))+(((-1.0)*r01*sj1*x462*x464))+((pz*x474*x483))+(((-1.0)*r00*sj1*x458*x462))+(((-0.00159999948800025)*r01*x458*x460))+((x454*x491))+(((-1.096)*py*r01))+(((-1.0)*x457*x461*x462))+(((0.499849)*x498))+((x454*x467*x489))+(((-1.096)*pz*r02))+((x455*x467*x489))+(((-1.0)*x456*x469*x471))+((x455*x469*x471))+(((-1.0)*x456*x467*x489))+((cj1*x485))+(((-1.096)*x468))+(((-0.300304)*x491))+((cj1*x454*x465))+(((-1.0)*x454*x469*x471))+(((-1.0)*x459*x494))+((x459*x460*x484))+(((-1.0)*x465*x500))+((x461*x474*x477))+(((-0.300304)*sj1*x459)));
evalcond[7]=((((-1.0)*x454*x459*x490))+((x458*x486*x487))+((x455*x463*x470))+((x459*x472))+((x459*x476*x484))+(((-0.300304)*cj1*x459))+(((2.0)*pz*x460*x461))+(((-1.0)*x456*x463*x470))+(((-0.00159999948800025)*px*x457*x475))+(((2.0)*r00*x458*x460))+(((-1.0)*x454*x463*x469))+((py*x457*x483))+((x457*x461*x484))+(((-1.0)*x465*x497))+(((-1.0)*x465*x494))+((x470*x473))+((x455*x463*x469))+(((-0.00159999948800025)*r01*x458*x476))+(((-1.0)*x469*x473))+(((-1.0)*sj1*x485))+(((-1.0)*x454*x467*x488))+(((0.499849)*x499))+((x454*x463*x470))+(((1.99999936000031)*x457*x468))+((x459*x500))+(((-0.300304)*r01*x467))+(((-1.0)*x456*x467*x488))+((r01*x455*x467))+((r01*sj0*x472))+(((2.0)*r01*x460*x464))+(((0.000876799719424135)*py*r00))+(((-1.0)*x455*x459*x490))+(((-0.000876799719424135)*px*r01))+(((-1.09599964928017)*px*x461))+(((-1.09599964928017)*r02*x458))+((x465*x493))+(((-1.0)*x456*x463*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x501=((0.00205655461182551)*cj1);
IkReal x502=(cj0*py);
IkReal x503=(px*sj0);
IkReal x504=((2.57069326478189)*pz);
IkReal x505=((0.00205655461182551)*sj1);
IkReal x506=((2.5706940874036)*py*sj0);
IkReal x507=((2.5706940874036)*cj0*px);
if( IKabs(((((-1.0)*sj1*x504))+(((-1.0)*x502*x505))+((x503*x505))+(((-1.0)*cj1*x506))+(((-1.0)*cj1*x507)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.40874035989717)+(((-1.0)*sj1*x507))+(((-1.0)*sj1*x506))+((cj1*x504))+(((-1.0)*x501*x503))+((x501*x502)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj1*x504))+(((-1.0)*x502*x505))+((x503*x505))+(((-1.0)*cj1*x506))+(((-1.0)*cj1*x507))))+IKsqr(((-1.40874035989717)+(((-1.0)*sj1*x507))+(((-1.0)*sj1*x506))+((cj1*x504))+(((-1.0)*x501*x503))+((x501*x502))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj1*x504))+(((-1.0)*x502*x505))+((x503*x505))+(((-1.0)*cj1*x506))+(((-1.0)*cj1*x507))), ((-1.40874035989717)+(((-1.0)*sj1*x507))+(((-1.0)*sj1*x506))+((cj1*x504))+(((-1.0)*x501*x503))+((x501*x502))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x508=IKsin(j2);
IkReal x509=IKcos(j2);
IkReal x510=pz*pz;
IkReal x511=py*py;
IkReal x512=px*px;
IkReal x513=((0.151321)*sj4);
IkReal x514=(pz*sj1);
IkReal x515=(py*sj0);
IkReal x516=(cj0*r00);
IkReal x517=(cj1*px);
IkReal x518=(cj0*r02);
IkReal x519=((2.0)*px);
IkReal x520=((0.000799999744000123)*sj1);
IkReal x521=(cj0*py);
IkReal x522=((0.999999680000154)*r02);
IkReal x523=(pz*r00);
IkReal x524=(cj1*sj0);
IkReal x525=((1.0)*sj4);
IkReal x526=(px*r00);
IkReal x527=(cj0*r01);
IkReal x528=(r00*sj0);
IkReal x529=((0.000799999744000123)*cj1);
IkReal x530=((1.09599964928017)*pz);
IkReal x531=((0.000240243123122213)*sj1);
IkReal x532=(cj1*py);
IkReal x533=(px*sj1);
IkReal x534=(r02*sj0);
IkReal x535=((0.999999680000154)*r01);
IkReal x536=((0.000799999744000123)*pz);
IkReal x537=((0.999999680000154)*r00);
IkReal x538=(py*sj1);
IkReal x539=((0.00159999948800025)*pz);
IkReal x540=((1.99999936000031)*r01);
IkReal x541=((0.00159999948800025)*py);
IkReal x542=((0.300303903902766)*r02);
IkReal x543=(cj1*pz);
IkReal x544=((2.0)*r02);
IkReal x545=((1.0)*r01);
IkReal x546=((0.000799999744000123)*r00);
IkReal x547=((1.0)*cj1);
IkReal x548=(r01*sj0*sj1);
IkReal x549=((1.0)*x511);
IkReal x550=(sj1*x510);
IkReal x551=(sj1*x512);
IkReal x552=((0.389)*x509);
IkReal x553=((1.0)*x510);
IkReal x554=(cj1*x511);
IkReal x555=(sj1*x511);
IkReal x556=((0.389)*x508);
IkReal x557=(cj1*x512);
evalcond[0]=((((-1.0)*x527*x529))+(((-1.0)*cj1*x522))+x548+(((-1.0)*x508*x525))+((x524*x546))+((sj1*x516)));
evalcond[1]=((0.548)+(((0.000799999744000123)*sj0*x517))+((cj0*x533))+(((-1.0)*x521*x529))+x552+((sj1*x515))+(((-0.999999680000154)*x543)));
evalcond[2]=((((-1.0)*x520*x521))+((px*sj0*x520))+(((-0.999999680000154)*x514))+(((-1.0)*cj0*x517))+(((-1.0)*x556))+(((-1.0)*x515*x547)));
evalcond[3]=((((-1.0)*x524*x545))+(((-1.0)*sj1*x522))+(((-1.0)*x520*x527))+(((-1.0)*x516*x547))+((x520*x528))+(((-1.0)*x509*x525)));
evalcond[4]=((((-1.0)*x532*x537))+((r01*x524*x536))+(((-1.0)*x514*x528))+(((-1.0)*x518*x538))+((pz*x516*x529))+((x517*x535))+((x514*x527))+(((-1.0)*r02*x515*x529))+((x533*x534))+(((-0.000799999744000123)*x517*x518))+(((-1.0)*cj4*x556)));
evalcond[5]=((((-1.0)*x537*x538))+(((0.547999824640084)*x527))+(((-1.0)*px*x518*x520))+(((-1.0)*x517*x534))+((x518*x532))+(((0.000799999744000123)*r01*sj0*x514))+((x523*x524))+(((-1.0)*x527*x543))+(((-0.000438399859712067)*r02))+(((-1.0)*r02*x515*x520))+(((0.000799999744000123)*x514*x516))+((x533*x535))+(((-1.0)*cj4*x552))+(((-0.547999824640084)*x528)));
evalcond[6]=((((-0.00159999948800025)*r01*x515*x517))+((x511*x527*x529))+(((-1.0)*x510*x527*x529))+((x518*x532*x539))+((x516*x517*x541))+(((-1.0)*r00*sj1*x515*x519))+(((-0.300304)*sj1*x516))+(((-1.0)*x514*x518*x519))+(((-1.0)*x512*x527*x529))+(((-1.096)*x526))+((x510*x524*x546))+(((0.000240243123122213)*cj1*x527))+(((-0.300304)*x548))+((pz*x532*x540))+((x512*x548))+(((-1.096)*py*r01))+(((-1.0)*sj0*x545*x555))+((cj1*x542))+((x516*x550))+((x516*x555))+(((-1.096)*pz*r02))+(((-1.0)*x514*x515*x544))+(((-1.0)*x516*x551))+((x510*x548))+(((-1.0)*x512*x524*x546))+(((-1.0)*x517*x534*x539))+(((-1.0)*r01*sj1*x519*x521))+(((1.99999936000031)*x517*x523))+(((-1.0)*x508*x513))+(((-0.000240243123122213)*r00*x524))+((x511*x524*x546))+((cj1*x510*x522))+(((-1.0)*x522*x557))+(((-1.0)*x522*x554)));
evalcond[7]=((((2.0)*r01*x517*x521))+((x516*x533*x541))+(((-1.09599964928017)*px*x518))+(((-0.300304)*cj1*x516))+((x514*x518*x541))+(((-1.0)*x510*x516*x547))+(((1.99999936000031)*x514*x526))+(((-0.300304)*r01*x524))+(((-1.0)*x527*x531))+(((-1.0)*sj1*x542))+(((-1.0)*x512*x520*x527))+(((-1.0)*x512*x520*x528))+((x516*x530))+(((2.0)*r00*x515*x517))+((x515*x543*x544))+(((-1.0)*x510*x524*x545))+((py*x514*x540))+(((-1.09599964928017)*r02*x515))+((x516*x557))+((r01*x511*x524))+((x511*x520*x528))+((x511*x520*x527))+((r01*sj0*x530))+(((-1.0)*x512*x524*x545))+(((-0.00159999948800025)*px*x514*x534))+(((-1.0)*x511*x516*x547))+(((2.0)*pz*x517*x518))+(((0.000876799719424135)*py*r00))+(((-1.0)*x510*x520*x527))+((x528*x531))+(((-0.000876799719424135)*px*r01))+(((-1.0)*x509*x513))+(((-0.00159999948800025)*r01*x515*x533))+((x522*x550))+((x510*x520*x528))+(((-1.0)*x522*x551))+(((-1.0)*x522*x555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((0.29014598540146)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x558=(pz*sj1);
IkReal x559=(cj0*cj1);
IkReal x560=((1.82481751713555)*px);
IkReal x561=((0.00145985354655538)*py);
IkReal x562=(cj0*sj1);
IkReal x563=(sj0*sj1);
IkReal x564=((0.000442610698939436)*py);
IkReal x565=((0.000442610698939436)*px);
IkReal x566=(cj1*sj0);
IkReal x567=((0.553263550718546)*px);
IkReal x568=(cj1*pz);
IkReal x569=((0.00145985354655538)*px);
IkReal x570=(py*x566);
if( IKabs(((0.303188425793763)+(((-1.82481751713555)*x570))+((x565*x566))+((x562*x567))+((x563*x569))+(((-1.82481693319422)*x558))+(((-1.0)*x559*x564))+(((-1.0)*x559*x560))+(((-0.553263373674295)*x568))+(((-1.0)*x561*x562))+(((0.553263550718546)*py*x563)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.999999999390279)+(((-1.0)*x566*x569))+(((-0.553263373674295)*x558))+(((-0.553263550718546)*x570))+((x563*x565))+(((-1.0)*x562*x564))+(((-1.0)*x559*x567))+(((-1.0)*x560*x562))+(((-1.82481751713555)*py*x563))+(((1.82481693319422)*x568))+((x559*x561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.303188425793763)+(((-1.82481751713555)*x570))+((x565*x566))+((x562*x567))+((x563*x569))+(((-1.82481693319422)*x558))+(((-1.0)*x559*x564))+(((-1.0)*x559*x560))+(((-0.553263373674295)*x568))+(((-1.0)*x561*x562))+(((0.553263550718546)*py*x563))))+IKsqr(((-0.999999999390279)+(((-1.0)*x566*x569))+(((-0.553263373674295)*x558))+(((-0.553263550718546)*x570))+((x563*x565))+(((-1.0)*x562*x564))+(((-1.0)*x559*x567))+(((-1.0)*x560*x562))+(((-1.82481751713555)*py*x563))+(((1.82481693319422)*x568))+((x559*x561))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.303188425793763)+(((-1.82481751713555)*x570))+((x565*x566))+((x562*x567))+((x563*x569))+(((-1.82481693319422)*x558))+(((-1.0)*x559*x564))+(((-1.0)*x559*x560))+(((-0.553263373674295)*x568))+(((-1.0)*x561*x562))+(((0.553263550718546)*py*x563))), ((-0.999999999390279)+(((-1.0)*x566*x569))+(((-0.553263373674295)*x558))+(((-0.553263550718546)*x570))+((x563*x565))+(((-1.0)*x562*x564))+(((-1.0)*x559*x567))+(((-1.0)*x560*x562))+(((-1.82481751713555)*py*x563))+(((1.82481693319422)*x568))+((x559*x561))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x571=IKcos(j2);
IkReal x572=IKsin(j2);
IkReal x573=pz*pz;
IkReal x574=py*py;
IkReal x575=px*px;
IkReal x576=(pz*sj1);
IkReal x577=(py*sj0);
IkReal x578=(cj0*r00);
IkReal x579=(cj1*px);
IkReal x580=(cj0*r02);
IkReal x581=((2.0)*px);
IkReal x582=((0.000799999744000123)*sj1);
IkReal x583=(cj0*py);
IkReal x584=((0.999999680000154)*r02);
IkReal x585=(pz*r00);
IkReal x586=(cj1*sj0);
IkReal x587=(px*r00);
IkReal x588=(cj0*r01);
IkReal x589=(r00*sj0);
IkReal x590=((0.000799999744000123)*cj1);
IkReal x591=((0.000240243123122213)*sj1);
IkReal x592=(cj1*py);
IkReal x593=(px*sj1);
IkReal x594=(r02*sj0);
IkReal x595=((0.999999680000154)*r01);
IkReal x596=((0.000799999744000123)*pz);
IkReal x597=((0.999999680000154)*r00);
IkReal x598=(py*sj1);
IkReal x599=((0.00159999948800025)*pz);
IkReal x600=((1.99999936000031)*r01);
IkReal x601=((0.00159999948800025)*py);
IkReal x602=((0.300303903902766)*r02);
IkReal x603=(cj1*pz);
IkReal x604=((2.0)*r02);
IkReal x605=((1.0)*r01);
IkReal x606=((1.09599964928017)*pz);
IkReal x607=((0.000799999744000123)*r00);
IkReal x608=((1.0)*cj1);
IkReal x609=(r01*sj0*sj1);
IkReal x610=((1.0)*x574);
IkReal x611=(sj1*x573);
IkReal x612=(sj1*x575);
IkReal x613=((1.0)*x573);
IkReal x614=(cj1*x574);
IkReal x615=((0.501866788314433)*x572);
IkReal x616=(sj4*x572);
IkReal x617=((0.1521602016)*x572);
IkReal x618=((0.1521602016)*x571);
IkReal x619=(sj1*x574);
IkReal x620=((0.501866788314433)*x571);
IkReal x621=(sj4*x571);
IkReal x622=(cj1*x575);
evalcond[0]=((0.548)+(((-0.999999680000154)*x603))+((sj1*x577))+(((-1.0)*x583*x590))+(((-1.0)*x617))+x620+(((0.000799999744000123)*sj0*x579))+((cj0*x593)));
evalcond[1]=(((sj1*x578))+(((-1.0)*x588*x590))+(((0.9569824)*x621))+x609+(((-0.290145985443817)*x616))+(((-1.0)*cj1*x584))+((x586*x607)));
evalcond[2]=((((-1.0)*x582*x583))+(((-0.999999680000154)*x576))+(((-1.0)*cj0*x579))+(((-1.0)*x577*x608))+(((-1.0)*x615))+(((-1.0)*x618))+((px*sj0*x582)));
evalcond[3]=((((-1.0)*x582*x588))+((x582*x589))+(((-1.0)*x586*x605))+(((-0.290145985443817)*x621))+(((-1.0)*x578*x608))+(((-0.9569824)*x616))+(((-1.0)*sj1*x584)));
evalcond[4]=(((pz*x578*x590))+((r01*x586*x596))+(((-0.000799999744000123)*x579*x580))+(((-1.0)*r02*x577*x590))+((x579*x595))+(((-1.0)*x580*x598))+(((-1.0)*x592*x597))+(((-1.0)*x576*x589))+(((-1.0)*cj4*x615))+(((-1.0)*cj4*x618))+((x576*x588))+((x593*x594)));
evalcond[5]=((((-1.0)*x579*x594))+(((-1.0)*x597*x598))+(((-1.0)*r02*x577*x582))+(((-0.547999824640084)*x589))+(((-1.0)*px*x580*x582))+(((0.000799999744000123)*r01*sj0*x576))+(((-1.0)*cj4*x620))+((x585*x586))+((x580*x592))+(((0.000799999744000123)*x576*x578))+(((-0.000438399859712067)*r02))+(((-1.0)*x588*x603))+((cj4*x617))+((x593*x595))+(((0.547999824640084)*x588)));
evalcond[6]=((((-1.0)*x573*x588*x590))+(((-0.300304)*sj1*x578))+((cj1*x573*x584))+((x574*x588*x590))+(((-0.000240243123122213)*r00*x586))+(((-1.0)*x584*x614))+(((-1.0)*x584*x622))+(((-0.00159999948800025)*r01*x577*x579))+(((-1.0)*x575*x586*x607))+(((0.000240243123122213)*cj1*x588))+((x580*x592*x599))+(((-1.0)*r01*sj1*x581*x583))+(((-1.0)*x579*x594*x599))+((x573*x586*x607))+(((-1.0)*sj0*x605*x619))+(((-1.0)*x576*x580*x581))+(((-1.096)*py*r01))+(((-1.096)*x587))+(((-1.096)*pz*r02))+(((-0.2631921705952)*x621))+((cj1*x602))+((pz*x592*x600))+(((-1.0)*r00*sj1*x577*x581))+(((1.99999936000031)*x579*x585))+(((-1.0)*x578*x612))+(((-1.0)*x576*x577*x604))+(((-0.300304)*x609))+((x578*x579*x601))+((x574*x586*x607))+((x575*x609))+(((-1.0)*x575*x588*x590))+((x573*x609))+((x578*x619))+((x578*x611))+(((0.0797968193292749)*x616)));
evalcond[7]=(((x578*x606))+(((-0.300304)*cj1*x578))+((x574*x582*x589))+((x574*x582*x588))+(((-1.0)*x575*x582*x588))+(((-1.0)*x575*x582*x589))+((x584*x611))+(((-1.0)*x588*x591))+(((-1.0)*x584*x612))+(((-1.0)*x584*x619))+(((-1.0)*x575*x586*x605))+(((-1.0)*x573*x586*x605))+((r01*sj0*x606))+(((0.2631921705952)*x616))+(((-1.09599964928017)*r02*x577))+(((2.0)*pz*x579*x580))+(((-0.300304)*r01*x586))+(((-1.0)*sj1*x602))+((x573*x582*x589))+((x578*x622))+(((0.0797968193292749)*x621))+(((1.99999936000031)*x576*x587))+((x578*x593*x601))+((r01*x574*x586))+(((-0.00159999948800025)*r01*x577*x593))+(((-1.0)*x574*x578*x608))+(((2.0)*r01*x579*x583))+((x576*x580*x601))+(((-1.0)*x573*x578*x608))+((py*x576*x600))+(((0.000876799719424135)*py*r00))+(((-0.000876799719424135)*px*r01))+((x589*x591))+((x577*x603*x604))+(((-1.09599964928017)*px*x580))+(((-0.00159999948800025)*px*x576*x594))+(((-1.0)*x573*x582*x588))+(((2.0)*r00*x577*x579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.29014598540146)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x623=(pz*sj1);
IkReal x624=(cj0*cj1);
IkReal x625=((1.82481751713555)*px);
IkReal x626=((0.00145985354655538)*py);
IkReal x627=(cj0*sj1);
IkReal x628=(sj0*sj1);
IkReal x629=((0.000442610698939436)*py);
IkReal x630=((0.000442610698939436)*px);
IkReal x631=(cj1*sj0);
IkReal x632=((0.553263550718546)*px);
IkReal x633=(cj1*pz);
IkReal x634=((0.00145985354655538)*px);
IkReal x635=(py*x631);
if( IKabs(((-0.303188425793763)+(((-1.82481693319422)*x623))+(((-1.0)*x630*x631))+((x628*x634))+(((-1.0)*x624*x625))+(((-1.82481751713555)*x635))+(((-1.0)*x627*x632))+((x624*x629))+(((-1.0)*x626*x627))+(((0.553263373674295)*x633))+(((-0.553263550718546)*py*x628)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.999999999390279)+(((-1.0)*x631*x634))+(((-1.82481751713555)*py*x628))+(((0.553263550718546)*x635))+(((-1.0)*x628*x630))+(((1.82481693319422)*x633))+(((-1.0)*x625*x627))+((x624*x632))+((x624*x626))+(((0.553263373674295)*x623))+((x627*x629)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.303188425793763)+(((-1.82481693319422)*x623))+(((-1.0)*x630*x631))+((x628*x634))+(((-1.0)*x624*x625))+(((-1.82481751713555)*x635))+(((-1.0)*x627*x632))+((x624*x629))+(((-1.0)*x626*x627))+(((0.553263373674295)*x633))+(((-0.553263550718546)*py*x628))))+IKsqr(((-0.999999999390279)+(((-1.0)*x631*x634))+(((-1.82481751713555)*py*x628))+(((0.553263550718546)*x635))+(((-1.0)*x628*x630))+(((1.82481693319422)*x633))+(((-1.0)*x625*x627))+((x624*x632))+((x624*x626))+(((0.553263373674295)*x623))+((x627*x629))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.303188425793763)+(((-1.82481693319422)*x623))+(((-1.0)*x630*x631))+((x628*x634))+(((-1.0)*x624*x625))+(((-1.82481751713555)*x635))+(((-1.0)*x627*x632))+((x624*x629))+(((-1.0)*x626*x627))+(((0.553263373674295)*x633))+(((-0.553263550718546)*py*x628))), ((-0.999999999390279)+(((-1.0)*x631*x634))+(((-1.82481751713555)*py*x628))+(((0.553263550718546)*x635))+(((-1.0)*x628*x630))+(((1.82481693319422)*x633))+(((-1.0)*x625*x627))+((x624*x632))+((x624*x626))+(((0.553263373674295)*x623))+((x627*x629))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x636=IKcos(j2);
IkReal x637=IKsin(j2);
IkReal x638=pz*pz;
IkReal x639=py*py;
IkReal x640=px*px;
IkReal x641=(pz*sj1);
IkReal x642=(py*sj0);
IkReal x643=(cj0*r00);
IkReal x644=(cj1*px);
IkReal x645=(cj0*r02);
IkReal x646=((2.0)*px);
IkReal x647=((0.000799999744000123)*sj1);
IkReal x648=(cj0*py);
IkReal x649=((0.999999680000154)*r02);
IkReal x650=(pz*r00);
IkReal x651=(cj1*sj0);
IkReal x652=(px*r00);
IkReal x653=(cj0*r01);
IkReal x654=(r00*sj0);
IkReal x655=((0.000799999744000123)*cj1);
IkReal x656=((0.000240243123122213)*sj1);
IkReal x657=(cj1*py);
IkReal x658=(px*sj1);
IkReal x659=(r02*sj0);
IkReal x660=((0.999999680000154)*r01);
IkReal x661=((0.000799999744000123)*pz);
IkReal x662=((0.999999680000154)*r00);
IkReal x663=(py*sj1);
IkReal x664=((0.00159999948800025)*pz);
IkReal x665=((1.99999936000031)*r01);
IkReal x666=((0.00159999948800025)*py);
IkReal x667=((0.300303903902766)*r02);
IkReal x668=(cj1*pz);
IkReal x669=((2.0)*r02);
IkReal x670=((1.0)*r01);
IkReal x671=((1.09599964928017)*pz);
IkReal x672=((0.000799999744000123)*r00);
IkReal x673=((1.0)*cj1);
IkReal x674=(r01*sj0*sj1);
IkReal x675=((1.0)*x639);
IkReal x676=(sj1*x638);
IkReal x677=(sj1*x640);
IkReal x678=((1.0)*x638);
IkReal x679=(cj1*x639);
IkReal x680=((0.501866788314433)*x637);
IkReal x681=(sj4*x637);
IkReal x682=((0.1521602016)*x637);
IkReal x683=((0.1521602016)*x636);
IkReal x684=(sj1*x639);
IkReal x685=((0.501866788314433)*x636);
IkReal x686=(sj4*x636);
IkReal x687=(cj1*x640);
evalcond[0]=((0.548)+(((0.000799999744000123)*sj0*x644))+(((-0.999999680000154)*x668))+((sj1*x642))+x682+x685+(((-1.0)*x648*x655))+((cj0*x658)));
evalcond[1]=(((x651*x672))+(((-0.9569824)*x686))+(((-1.0)*cj1*x649))+((sj1*x643))+(((-0.290145985443817)*x681))+x674+(((-1.0)*x653*x655)));
evalcond[2]=((((-1.0)*x680))+(((-1.0)*x647*x648))+(((-0.999999680000154)*x641))+(((-1.0)*cj0*x644))+(((-1.0)*x642*x673))+((px*sj0*x647))+x683);
evalcond[3]=(((x647*x654))+(((-1.0)*x643*x673))+(((-1.0)*sj1*x649))+(((-0.290145985443817)*x686))+(((-1.0)*x647*x653))+(((-1.0)*x651*x670))+(((0.9569824)*x681)));
evalcond[4]=((((-0.000799999744000123)*x644*x645))+((r01*x651*x661))+((cj4*x683))+(((-1.0)*cj4*x680))+(((-1.0)*x657*x662))+((x644*x660))+(((-1.0)*x645*x663))+((x641*x653))+(((-1.0)*r02*x642*x655))+((pz*x643*x655))+((x658*x659))+(((-1.0)*x641*x654)));
evalcond[5]=((((-1.0)*x662*x663))+(((0.000799999744000123)*r01*sj0*x641))+(((0.547999824640084)*x653))+(((-1.0)*px*x645*x647))+(((-1.0)*x644*x659))+(((-1.0)*cj4*x685))+(((-1.0)*cj4*x682))+((x645*x657))+(((0.000799999744000123)*x641*x643))+(((-1.0)*x653*x668))+(((-1.0)*r02*x642*x647))+(((-0.000438399859712067)*r02))+(((-0.547999824640084)*x654))+((x658*x660))+((x650*x651)));
evalcond[6]=((((-1.0)*x643*x677))+(((-1.0)*r00*sj1*x642*x646))+((x638*x651*x672))+(((-1.0)*x640*x651*x672))+((x643*x684))+(((-1.0)*x649*x679))+(((-1.0)*x638*x653*x655))+(((-1.0)*x649*x687))+(((1.99999936000031)*x644*x650))+((pz*x657*x665))+(((-1.0)*x641*x645*x646))+(((-0.00159999948800025)*r01*x642*x644))+(((-1.096)*x652))+(((-1.096)*py*r01))+(((-0.300304)*x674))+(((0.000240243123122213)*cj1*x653))+((x639*x653*x655))+((cj1*x638*x649))+((x645*x657*x664))+(((-1.0)*sj0*x670*x684))+(((0.0797968193292749)*x681))+(((-1.096)*pz*r02))+(((-0.000240243123122213)*r00*x651))+((x639*x651*x672))+((x643*x676))+((x638*x674))+(((-0.300304)*sj1*x643))+(((-1.0)*x641*x642*x669))+((cj1*x667))+((x643*x644*x666))+(((0.2631921705952)*x686))+(((-1.0)*x640*x653*x655))+(((-1.0)*r01*sj1*x646*x648))+(((-1.0)*x644*x659*x664))+((x640*x674)));
evalcond[7]=(((x638*x647*x654))+((x642*x668*x669))+(((-0.00159999948800025)*px*x641*x659))+(((-1.0)*x640*x651*x670))+((x643*x687))+(((2.0)*pz*x644*x645))+(((-1.0)*sj1*x667))+(((-1.0)*x649*x677))+((x639*x647*x653))+((x639*x647*x654))+(((-1.09599964928017)*px*x645))+(((-0.300304)*cj1*x643))+(((-1.0)*x649*x684))+((r01*x639*x651))+((x641*x645*x666))+(((-1.0)*x639*x643*x673))+((x654*x656))+(((-0.2631921705952)*x681))+(((-1.0)*x638*x647*x653))+(((0.0797968193292749)*x686))+((r01*sj0*x671))+(((-1.0)*x638*x643*x673))+(((-0.00159999948800025)*r01*x642*x658))+((x643*x671))+(((-1.0)*x640*x647*x653))+(((-1.0)*x640*x647*x654))+((x643*x658*x666))+((x649*x676))+(((0.000876799719424135)*py*r00))+(((-1.0)*x638*x651*x670))+(((-1.09599964928017)*r02*x642))+(((1.99999936000031)*x641*x652))+(((-0.000876799719424135)*px*r01))+(((-0.300304)*r01*x651))+(((-1.0)*x653*x656))+((py*x641*x665))+(((2.0)*r01*x644*x648))+(((2.0)*r00*x642*x644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x704=IKPowWithIntegerCheck(sj4,-1);
if(!x704.valid){
continue;
}
IkReal x688=x704.value;
IkReal x689=(cj0*cj3);
IkReal x690=(py*sj0);
IkReal x691=((0.12719995929602)*cj1);
IkReal x692=(r00*sj0);
IkReal x693=(sj1*sj4);
IkReal x694=((999.999680000154)*pz);
IkReal x695=((0.438399859712067)*cj1);
IkReal x696=(cj0*r01);
IkReal x697=(cj1*r02);
IkReal x698=(r01*sj0*sj1);
IkReal x699=((1000.0)*cj1*sj4);
IkReal x700=((-0.00182481751824818)*x688);
IkReal x701=(cj0*r00*sj1);
IkReal x702=((0.799999744000123)*px*sj0);
IkReal x703=((0.799999744000123)*cj0*py*x693);
CheckValue<IkReal> x705=IKPowWithIntegerCheck(sj3,-1);
if(!x705.valid){
continue;
}
if( IKabs((x700*(((((-1.0)*x693*x702))+(((158.999949120024)*x697))+((x690*x699))+(((-159.0)*x698))+((x691*x696))+((x693*x694))+((cj0*px*x699))+x703+(((-1.0)*x691*x692))+(((-159.0)*x701)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x700*(x705.value)*(((((-547.999824640084)*x697))+(((-0.799999744000123)*py*x689*x693))+(((159.0)*cj3*x698))+((x692*x695))+((cj3*x691*x692))+(((159.0)*r00*sj1*x689))+(((-1.0)*px*x689*x699))+(((-1.0)*cj3*x693*x694))+(((-1.0)*cj3*x690*x699))+(((-1.0)*x695*x696))+(((548.0)*x701))+(((548.0)*x698))+(((-1.0)*r01*x689*x691))+((cj3*x693*x702))+(((-158.999949120024)*cj3*x697)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x700*(((((-1.0)*x693*x702))+(((158.999949120024)*x697))+((x690*x699))+(((-159.0)*x698))+((x691*x696))+((x693*x694))+((cj0*px*x699))+x703+(((-1.0)*x691*x692))+(((-159.0)*x701))))))+IKsqr((x700*(x705.value)*(((((-547.999824640084)*x697))+(((-0.799999744000123)*py*x689*x693))+(((159.0)*cj3*x698))+((x692*x695))+((cj3*x691*x692))+(((159.0)*r00*sj1*x689))+(((-1.0)*px*x689*x699))+(((-1.0)*cj3*x693*x694))+(((-1.0)*cj3*x690*x699))+(((-1.0)*x695*x696))+(((548.0)*x701))+(((548.0)*x698))+(((-1.0)*r01*x689*x691))+((cj3*x693*x702))+(((-158.999949120024)*cj3*x697))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x700*(((((-1.0)*x693*x702))+(((158.999949120024)*x697))+((x690*x699))+(((-159.0)*x698))+((x691*x696))+((x693*x694))+((cj0*px*x699))+x703+(((-1.0)*x691*x692))+(((-159.0)*x701))))), (x700*(x705.value)*(((((-547.999824640084)*x697))+(((-0.799999744000123)*py*x689*x693))+(((159.0)*cj3*x698))+((x692*x695))+((cj3*x691*x692))+(((159.0)*r00*sj1*x689))+(((-1.0)*px*x689*x699))+(((-1.0)*cj3*x693*x694))+(((-1.0)*cj3*x690*x699))+(((-1.0)*x695*x696))+(((548.0)*x701))+(((548.0)*x698))+(((-1.0)*r01*x689*x691))+((cj3*x693*x702))+(((-158.999949120024)*cj3*x697))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x706=IKcos(j2);
IkReal x707=IKsin(j2);
IkReal x708=pz*pz;
IkReal x709=py*py;
IkReal x710=px*px;
IkReal x711=(pz*sj1);
IkReal x712=(py*sj0);
IkReal x713=(cj0*r00);
IkReal x714=(cj1*px);
IkReal x715=(cj0*r02);
IkReal x716=((2.0)*px);
IkReal x717=((0.999999680000154)*r02);
IkReal x718=(pz*r00);
IkReal x719=(cj1*sj0);
IkReal x720=(px*r00);
IkReal x721=(cj0*r01);
IkReal x722=(r00*sj0);
IkReal x723=((0.000799999744000123)*cj1);
IkReal x724=((0.000799999744000123)*sj1);
IkReal x725=((1.09599964928017)*pz);
IkReal x726=((0.000240243123122213)*sj1);
IkReal x727=(cj1*py);
IkReal x728=(cj0*py);
IkReal x729=(px*sj1);
IkReal x730=(r02*sj0);
IkReal x731=((0.325585)*cj3);
IkReal x732=((0.999999680000154)*r01);
IkReal x733=((0.000799999744000123)*pz);
IkReal x734=((0.999999680000154)*r00);
IkReal x735=(py*sj1);
IkReal x736=((0.159)*sj3);
IkReal x737=((0.00159999948800025)*pz);
IkReal x738=((1.99999936000031)*r01);
IkReal x739=((0.00159999948800025)*py);
IkReal x740=((1.0)*cj1);
IkReal x741=((0.300303903902766)*r02);
IkReal x742=((2.0)*r02);
IkReal x743=(cj1*pz);
IkReal x744=((1.0)*r01);
IkReal x745=((0.275023)*sj3);
IkReal x746=((0.000799999744000123)*r00);
IkReal x747=(r01*sj0*sj1);
IkReal x748=(cj4*x706);
IkReal x749=((1.0)*x709);
IkReal x750=(sj4*x707);
IkReal x751=(sj1*x708);
IkReal x752=(sj1*x710);
IkReal x753=((1.0)*x708);
IkReal x754=(cj1*x709);
IkReal x755=((0.159)*x707);
IkReal x756=(cj3*x706);
IkReal x757=(sj1*x709);
IkReal x758=((0.548)*x707);
IkReal x759=(sj4*x706);
IkReal x760=(cj1*x710);
evalcond[0]=((((-1.0)*cj1*x717))+((x719*x746))+((cj3*x750))+(((-1.0)*x721*x723))+((sj1*x713))+x747+((sj3*x759)));
evalcond[1]=(((sj4*x756))+((x722*x724))+(((-1.0)*x719*x744))+(((-1.0)*x721*x724))+(((-1.0)*x713*x740))+(((-1.0)*sj1*x717))+(((-1.0)*sj3*x750)));
evalcond[2]=((0.548)+(((-1.0)*x723*x728))+(((0.000799999744000123)*sj0*x714))+((cj0*x729))+(((-0.999999680000154)*x743))+((sj1*x712))+(((-1.0)*x707*x736))+(((0.159)*x756))+(((0.548)*x706)));
evalcond[3]=(((px*sj0*x724))+(((-1.0)*x724*x728))+(((-1.0)*cj3*x755))+(((-1.0)*cj0*x714))+(((-0.999999680000154)*x711))+(((-1.0)*x712*x740))+(((-1.0)*x706*x736))+(((-1.0)*x758)));
evalcond[4]=(((pz*x713*x723))+(((-0.000799999744000123)*x714*x715))+(((-1.0)*x727*x734))+(((-1.0)*r02*x712*x723))+((r01*x719*x733))+(((-1.0)*cj3*cj4*x755))+(((-1.0)*x711*x722))+((x729*x730))+((x711*x721))+(((-1.0)*cj4*x758))+(((-1.0)*x715*x735))+((x714*x732))+(((-1.0)*x736*x748)));
evalcond[5]=((((-0.159)*cj3*x748))+(((0.547999824640084)*x721))+(((-1.0)*r02*x712*x724))+(((0.000799999744000123)*r01*sj0*x711))+(((0.000799999744000123)*x711*x713))+(((-1.0)*pz*x721*x740))+(((-1.0)*x734*x735))+(((-0.548)*x748))+((x729*x732))+(((-1.0)*px*x715*x724))+(((-0.000438399859712067)*r02))+(((-1.0)*x714*x730))+((x718*x719))+((cj4*x707*x736))+(((-0.547999824640084)*x722))+((x715*x727)));
evalcond[6]=((((-1.0)*x711*x712*x742))+(((1.99999936000031)*x714*x718))+(((-1.0)*x745*x759))+((x709*x721*x723))+((x709*x719*x746))+(((0.174264)*x750))+((cj1*x741))+(((-1.0)*x717*x754))+((x713*x751))+((x713*x757))+((pz*x727*x738))+((x731*x750))+(((-1.0)*x710*x719*x746))+((x708*x719*x746))+(((-1.0)*x710*x721*x723))+(((-1.0)*x713*x752))+(((-0.000240243123122213)*r00*x719))+((x715*x727*x737))+(((-1.096)*py*r01))+(((-0.300304)*sj1*x713))+((cj1*x708*x717))+(((-1.0)*sj0*x744*x757))+(((-0.300304)*x747))+(((-1.096)*pz*r02))+(((0.000240243123122213)*cj1*x721))+(((-1.096)*x720))+(((-1.0)*x708*x721*x723))+(((-1.0)*x711*x715*x716))+(((-1.0)*x717*x760))+(((-1.0)*r00*sj1*x712*x716))+((x713*x714*x739))+(((-0.00159999948800025)*r01*x712*x714))+(((-1.0)*x714*x730*x737))+((x708*x747))+((x710*x747))+(((-1.0)*x716*x721*x735)));
evalcond[7]=(((x745*x750))+(((2.0)*r00*x712*x714))+(((-0.00159999948800025)*px*x711*x730))+(((-1.0)*sj1*x741))+(((-1.0)*x710*x722*x724))+((r01*sj0*x725))+(((1.99999936000031)*x711*x720))+((x713*x725))+(((2.0)*pz*x714*x715))+((x709*x721*x724))+(((0.174264)*x759))+(((-1.0)*x717*x757))+(((-1.0)*x717*x752))+((x713*x760))+(((-1.0)*x709*x713*x740))+((x711*x715*x739))+((x713*x729*x739))+(((-1.09599964928017)*px*x715))+((x731*x759))+(((-1.0)*x710*x719*x744))+(((2.0)*py*x714*x721))+(((-1.0)*x710*x721*x724))+((x722*x726))+(((-0.300304)*cj1*x713))+(((-0.300304)*r01*x719))+((py*x711*x738))+(((-1.09599964928017)*r02*x712))+((r01*x709*x719))+(((-1.0)*x708*x721*x724))+(((-1.0)*x721*x726))+(((-1.0)*x708*x713*x740))+((x709*x722*x724))+((x708*x722*x724))+(((0.000876799719424135)*py*r00))+(((-1.0)*x708*x719*x744))+(((-0.000876799719424135)*px*r01))+((x717*x751))+((x712*x742*x743))+(((-0.00159999948800025)*r01*x712*x729)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x761=(cj0*cj3);
IkReal x762=(cj1*sj3);
IkReal x763=((158.999949120024)*r02);
IkReal x764=(px*sj3);
IkReal x765=(sj0*sj3);
IkReal x766=(r01*sj1);
IkReal x767=(cj1*cj3);
IkReal x768=(cj1*r01);
IkReal x769=((548.0)*sj4);
IkReal x770=(cj3*sj0);
IkReal x771=(cj3*x769);
IkReal x772=((0.799999744000123)*cj1*sj4);
IkReal x773=((1000.0)*sj1*sj4);
IkReal x774=((0.12719995929602)*r00*sj0);
IkReal x775=((999.999680000154)*pz*sj4);
IkReal x776=(cj0*r00*sj1);
CheckValue<IkReal> x777 = IKatan2WithCheck(IkReal((((sj3*x769))+(((547.999824640084)*cj1*r02))+(((0.12719995929602)*x761*x768))+(((-159.0)*r00*sj1*x761))+(((-548.0)*x776))+((cj0*x764*x773))+(((0.438399859712067)*cj0*x768))+(((-1.0)*x767*x774))+((x763*x767))+(((-0.799999744000123)*cj0*py*sj4*x762))+(((-0.438399859712067)*cj1*r00*sj0))+(((0.799999744000123)*px*sj0*sj4*x762))+(((-548.0)*sj0*x766))+(((-159.0)*x766*x770))+(((-1.0)*x762*x775))+((py*x765*x773)))),IkReal(((((0.12719995929602)*cj0*r01*x762))+(((-0.799999744000123)*px*sj0*sj4*x767))+(((-1.0)*py*x770*x773))+((py*x761*x772))+((x767*x775))+((x762*x763))+(((-1.0)*px*x761*x773))+(((-159.0)*sj3*x776))+(((-1.0)*x771))+(((-1.0)*x762*x774))+(((-159.0)*x765*x766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x777.valid){
continue;
}
CheckValue<IkReal> x778=IKPowWithIntegerCheck(IKsign(((((159.0)*sj4))+x771)),-1);
if(!x778.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x777.value)+(((1.5707963267949)*(x778.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x779=IKcos(j2);
IkReal x780=IKsin(j2);
IkReal x781=pz*pz;
IkReal x782=py*py;
IkReal x783=px*px;
IkReal x784=(pz*sj1);
IkReal x785=(py*sj0);
IkReal x786=(cj0*r00);
IkReal x787=(cj1*px);
IkReal x788=(cj0*r02);
IkReal x789=((2.0)*px);
IkReal x790=((0.999999680000154)*r02);
IkReal x791=(pz*r00);
IkReal x792=(cj1*sj0);
IkReal x793=(px*r00);
IkReal x794=(cj0*r01);
IkReal x795=(r00*sj0);
IkReal x796=((0.000799999744000123)*cj1);
IkReal x797=((0.000799999744000123)*sj1);
IkReal x798=((1.09599964928017)*pz);
IkReal x799=((0.000240243123122213)*sj1);
IkReal x800=(cj1*py);
IkReal x801=(cj0*py);
IkReal x802=(px*sj1);
IkReal x803=(r02*sj0);
IkReal x804=((0.325585)*cj3);
IkReal x805=((0.999999680000154)*r01);
IkReal x806=((0.000799999744000123)*pz);
IkReal x807=((0.999999680000154)*r00);
IkReal x808=(py*sj1);
IkReal x809=((0.159)*sj3);
IkReal x810=((0.00159999948800025)*pz);
IkReal x811=((1.99999936000031)*r01);
IkReal x812=((0.00159999948800025)*py);
IkReal x813=((1.0)*cj1);
IkReal x814=((0.300303903902766)*r02);
IkReal x815=((2.0)*r02);
IkReal x816=(cj1*pz);
IkReal x817=((1.0)*r01);
IkReal x818=((0.275023)*sj3);
IkReal x819=((0.000799999744000123)*r00);
IkReal x820=(r01*sj0*sj1);
IkReal x821=(cj4*x779);
IkReal x822=((1.0)*x782);
IkReal x823=(sj4*x780);
IkReal x824=(sj1*x781);
IkReal x825=(sj1*x783);
IkReal x826=((1.0)*x781);
IkReal x827=(cj1*x782);
IkReal x828=((0.159)*x780);
IkReal x829=(cj3*x779);
IkReal x830=(sj1*x782);
IkReal x831=((0.548)*x780);
IkReal x832=(sj4*x779);
IkReal x833=(cj1*x783);
evalcond[0]=((((-1.0)*x794*x796))+((x792*x819))+((sj1*x786))+(((-1.0)*cj1*x790))+x820+((sj3*x832))+((cj3*x823)));
evalcond[1]=((((-1.0)*x794*x797))+(((-1.0)*x792*x817))+(((-1.0)*sj3*x823))+(((-1.0)*x786*x813))+((sj4*x829))+(((-1.0)*sj1*x790))+((x795*x797)));
evalcond[2]=((0.548)+(((-1.0)*x780*x809))+(((-1.0)*x796*x801))+(((0.548)*x779))+((sj1*x785))+(((-0.999999680000154)*x816))+((cj0*x802))+(((0.000799999744000123)*sj0*x787))+(((0.159)*x829)));
evalcond[3]=((((-1.0)*x797*x801))+(((-1.0)*x779*x809))+(((-1.0)*x785*x813))+(((-1.0)*cj0*x787))+(((-1.0)*x831))+(((-0.999999680000154)*x784))+((px*sj0*x797))+(((-1.0)*cj3*x828)));
evalcond[4]=(((r01*x792*x806))+(((-1.0)*x809*x821))+(((-1.0)*cj4*x831))+(((-1.0)*r02*x785*x796))+(((-1.0)*x788*x808))+((pz*x786*x796))+(((-1.0)*x800*x807))+((x784*x794))+(((-1.0)*cj3*cj4*x828))+(((-1.0)*x784*x795))+((x802*x803))+(((-0.000799999744000123)*x787*x788))+((x787*x805)));
evalcond[5]=(((x788*x800))+(((-1.0)*x807*x808))+(((0.000799999744000123)*r01*sj0*x784))+((cj4*x780*x809))+(((-1.0)*pz*x794*x813))+(((-1.0)*x787*x803))+(((-0.159)*cj3*x821))+(((-0.547999824640084)*x795))+(((-1.0)*r02*x785*x797))+(((0.000799999744000123)*x784*x786))+(((-0.548)*x821))+(((-0.000438399859712067)*r02))+(((0.547999824640084)*x794))+(((-1.0)*px*x788*x797))+((x802*x805))+((x791*x792)));
evalcond[6]=((((-1.0)*sj0*x817*x830))+(((-0.000240243123122213)*r00*x792))+(((-1.0)*x790*x833))+(((-1.0)*x790*x827))+(((-1.0)*x783*x794*x796))+((x782*x794*x796))+(((-1.0)*x783*x792*x819))+((cj1*x781*x790))+(((0.174264)*x823))+(((-1.0)*x818*x832))+(((-1.096)*x793))+(((-1.0)*x781*x794*x796))+(((-1.0)*x786*x825))+((x783*x820))+((x786*x830))+((x781*x820))+(((-1.096)*py*r01))+(((1.99999936000031)*x787*x791))+((x786*x824))+(((-1.0)*x789*x794*x808))+(((-1.096)*pz*r02))+(((0.000240243123122213)*cj1*x794))+((x804*x823))+((x786*x787*x812))+(((-1.0)*x784*x785*x815))+(((-0.00159999948800025)*r01*x785*x787))+(((-0.300304)*x820))+((cj1*x814))+(((-1.0)*x784*x788*x789))+(((-0.300304)*sj1*x786))+(((-1.0)*r00*sj1*x785*x789))+((x788*x800*x810))+((x781*x792*x819))+((pz*x800*x811))+(((-1.0)*x787*x803*x810))+((x782*x792*x819)));
evalcond[7]=((((-1.09599964928017)*px*x788))+(((-1.0)*x790*x830))+(((-1.0)*x794*x799))+(((-1.0)*x790*x825))+(((-1.0)*x783*x794*x797))+(((-0.00159999948800025)*r01*x785*x802))+((x786*x798))+((py*x784*x811))+((r01*x782*x792))+((x782*x794*x797))+((x785*x815*x816))+(((-0.00159999948800025)*px*x784*x803))+((r01*sj0*x798))+((x782*x795*x797))+(((-1.0)*x781*x792*x817))+(((2.0)*pz*x787*x788))+(((-1.09599964928017)*r02*x785))+(((-1.0)*x783*x792*x817))+(((-1.0)*x783*x795*x797))+(((-0.300304)*r01*x792))+(((-1.0)*x781*x794*x797))+(((0.174264)*x832))+(((-0.300304)*cj1*x786))+(((1.99999936000031)*x784*x793))+((x786*x833))+(((2.0)*py*x787*x794))+(((-1.0)*x781*x786*x813))+(((-1.0)*x782*x786*x813))+((x818*x823))+((x804*x832))+((x790*x824))+(((0.000876799719424135)*py*r00))+((x786*x802*x812))+(((-1.0)*sj1*x814))+(((-0.000876799719424135)*px*r01))+((x781*x795*x797))+(((2.0)*r00*x785*x787))+((x784*x788*x812))+((x795*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x834=(cj3*sj0);
IkReal x835=(r01*sj1);
IkReal x836=(cj1*r00);
IkReal x837=(cj0*sj3);
IkReal x838=(cj0*cj3);
IkReal x839=((0.999999680000154)*r02);
IkReal x840=(r00*sj1);
IkReal x841=(sj0*sj3);
IkReal x842=(cj1*r01);
CheckValue<IkReal> x843=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x843.valid){
continue;
}
CheckValue<IkReal> x844 = IKatan2WithCheck(IkReal(((((-1.0)*x834*x835))+(((-0.000799999744000123)*x835*x837))+(((0.000799999744000123)*x840*x841))+((cj1*cj3*x839))+(((-1.0)*x836*x837))+(((-1.0)*x838*x840))+(((-1.0)*x841*x842))+(((-0.000799999744000123)*x834*x836))+(((-1.0)*sj1*sj3*x839))+(((0.000799999744000123)*x838*x842)))),IkReal(((((-0.000799999744000123)*x836*x841))+((x836*x838))+(((0.000799999744000123)*x835*x838))+((cj1*sj3*x839))+(((-1.0)*x837*x840))+((x834*x842))+(((0.000799999744000123)*x837*x842))+(((-1.0)*x835*x841))+(((-0.000799999744000123)*x834*x840))+((cj3*sj1*x839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x844.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x843.value)))+(x844.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x845=IKcos(j2);
IkReal x846=IKsin(j2);
IkReal x847=pz*pz;
IkReal x848=py*py;
IkReal x849=px*px;
IkReal x850=(pz*sj1);
IkReal x851=(py*sj0);
IkReal x852=(cj0*r00);
IkReal x853=(cj1*px);
IkReal x854=(cj0*r02);
IkReal x855=((2.0)*px);
IkReal x856=((0.999999680000154)*r02);
IkReal x857=(pz*r00);
IkReal x858=(cj1*sj0);
IkReal x859=(px*r00);
IkReal x860=(cj0*r01);
IkReal x861=(r00*sj0);
IkReal x862=((0.000799999744000123)*cj1);
IkReal x863=((0.000799999744000123)*sj1);
IkReal x864=((1.09599964928017)*pz);
IkReal x865=((0.000240243123122213)*sj1);
IkReal x866=(cj1*py);
IkReal x867=(cj0*py);
IkReal x868=(px*sj1);
IkReal x869=(r02*sj0);
IkReal x870=((0.325585)*cj3);
IkReal x871=((0.999999680000154)*r01);
IkReal x872=((0.000799999744000123)*pz);
IkReal x873=((0.999999680000154)*r00);
IkReal x874=(py*sj1);
IkReal x875=((0.159)*sj3);
IkReal x876=((0.00159999948800025)*pz);
IkReal x877=((1.99999936000031)*r01);
IkReal x878=((0.00159999948800025)*py);
IkReal x879=((1.0)*cj1);
IkReal x880=((0.300303903902766)*r02);
IkReal x881=((2.0)*r02);
IkReal x882=(cj1*pz);
IkReal x883=((1.0)*r01);
IkReal x884=((0.275023)*sj3);
IkReal x885=((0.000799999744000123)*r00);
IkReal x886=(r01*sj0*sj1);
IkReal x887=(cj4*x845);
IkReal x888=((1.0)*x848);
IkReal x889=(sj4*x846);
IkReal x890=(sj1*x847);
IkReal x891=(sj1*x849);
IkReal x892=((1.0)*x847);
IkReal x893=(cj1*x848);
IkReal x894=((0.159)*x846);
IkReal x895=(cj3*x845);
IkReal x896=(sj1*x848);
IkReal x897=((0.548)*x846);
IkReal x898=(sj4*x845);
IkReal x899=(cj1*x849);
evalcond[0]=(((cj3*x889))+(((-1.0)*x860*x862))+((sj1*x852))+(((-1.0)*cj1*x856))+((sj3*x898))+((x858*x885))+x886);
evalcond[1]=((((-1.0)*sj3*x889))+((sj4*x895))+(((-1.0)*x860*x863))+(((-1.0)*x852*x879))+(((-1.0)*sj1*x856))+((x861*x863))+(((-1.0)*x858*x883)));
evalcond[2]=((0.548)+(((-1.0)*x846*x875))+((cj0*x868))+(((0.000799999744000123)*sj0*x853))+(((-1.0)*x862*x867))+((sj1*x851))+(((-0.999999680000154)*x882))+(((0.548)*x845))+(((0.159)*x895)));
evalcond[3]=((((-1.0)*cj3*x894))+(((-1.0)*x845*x875))+((px*sj0*x863))+(((-1.0)*x897))+(((-1.0)*cj0*x853))+(((-0.999999680000154)*x850))+(((-1.0)*x851*x879))+(((-1.0)*x863*x867)));
evalcond[4]=(((x850*x860))+((x868*x869))+(((-1.0)*x854*x874))+(((-1.0)*x866*x873))+(((-0.000799999744000123)*x853*x854))+((pz*x852*x862))+((r01*x858*x872))+(((-1.0)*cj3*cj4*x894))+(((-1.0)*cj4*x897))+((x853*x871))+(((-1.0)*r02*x851*x862))+(((-1.0)*x850*x861))+(((-1.0)*x875*x887)));
evalcond[5]=((((0.547999824640084)*x860))+(((-0.547999824640084)*x861))+(((0.000799999744000123)*r01*sj0*x850))+((x868*x871))+(((-1.0)*px*x854*x863))+(((-1.0)*x873*x874))+((cj4*x846*x875))+(((-0.159)*cj3*x887))+(((0.000799999744000123)*x850*x852))+(((-0.548)*x887))+(((-1.0)*pz*x860*x879))+(((-0.000438399859712067)*r02))+((x857*x858))+(((-1.0)*r02*x851*x863))+((x854*x866))+(((-1.0)*x853*x869)));
evalcond[6]=((((-1.0)*x856*x899))+(((-1.0)*x856*x893))+(((-1.0)*x849*x860*x862))+(((-1.0)*x884*x898))+((pz*x866*x877))+((cj1*x847*x856))+((x847*x886))+(((0.174264)*x889))+(((0.000240243123122213)*cj1*x860))+(((-1.0)*sj0*x883*x896))+(((-0.000240243123122213)*r00*x858))+((x848*x860*x862))+(((-1.0)*x852*x891))+((x852*x896))+((x852*x890))+(((1.99999936000031)*x853*x857))+(((-1.096)*py*r01))+((x847*x858*x885))+(((-1.0)*x853*x869*x876))+(((-1.0)*x850*x851*x881))+((x848*x858*x885))+(((-1.096)*pz*r02))+((x870*x889))+(((-1.0)*x855*x860*x874))+((x854*x866*x876))+(((-0.300304)*sj1*x852))+((x849*x886))+((cj1*x880))+(((-1.0)*x849*x858*x885))+(((-1.0)*x847*x860*x862))+(((-1.096)*x859))+(((-1.0)*x850*x854*x855))+(((-0.300304)*x886))+(((-0.00159999948800025)*r01*x851*x853))+(((-1.0)*r00*sj1*x851*x855))+((x852*x853*x878)));
evalcond[7]=((((-1.0)*x856*x896))+(((-1.0)*x856*x891))+((x848*x861*x863))+(((-1.0)*x849*x860*x863))+(((-1.09599964928017)*px*x854))+(((0.174264)*x898))+((py*x850*x877))+(((-0.300304)*r01*x858))+(((1.99999936000031)*x850*x859))+((x848*x860*x863))+((x852*x899))+(((-1.0)*x860*x865))+((x847*x861*x863))+((x850*x854*x878))+(((2.0)*pz*x853*x854))+((x851*x881*x882))+(((2.0)*py*x853*x860))+(((-1.09599964928017)*r02*x851))+(((2.0)*r00*x851*x853))+((x861*x865))+((r01*x848*x858))+(((-0.00159999948800025)*px*x850*x869))+(((-1.0)*x847*x852*x879))+(((-1.0)*x849*x858*x883))+(((-0.300304)*cj1*x852))+((x870*x898))+((x852*x868*x878))+(((-1.0)*x847*x860*x863))+(((-0.00159999948800025)*r01*x851*x868))+(((0.000876799719424135)*py*r00))+((x856*x890))+(((-1.0)*x848*x852*x879))+(((-0.000876799719424135)*px*r01))+((x852*x864))+(((-1.0)*x849*x861*x863))+(((-1.0)*sj1*x880))+(((-1.0)*x847*x858*x883))+((x884*x889))+((r01*sj0*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x900=((136.999956160021)*r02);
IkReal x901=((249.999920000038)*r02);
IkReal x902=((249.999920000038)*pz);
IkReal x903=((137.0)*cj0*r00);
IkReal x904=((137.0)*r01*sj0);
IkReal x905=((0.109599964928017)*r00*sj0);
IkReal x906=((0.109599964928017)*cj0*r01);
CheckValue<IkReal> x907=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x907.valid){
continue;
}
CheckValue<IkReal> x908 = IKatan2WithCheck(IkReal((((cj1*x905))+(((250.0)*px*r00))+(((250.0)*py*r01))+(((250.0)*pz*r02))+(((-1.0)*cj1*x906))+(((-1.0)*cj1*x900))+((sj1*x903))+((sj1*x904)))),IkReal(((((0.199999936000031)*py*r00))+(((-0.199999936000031)*px*r01))+(((-1.0)*py*sj0*x901))+(((-1.0)*cj0*px*x901))+(((-1.0)*sj1*x900))+(((-1.0)*sj1*x906))+(((-39.75)*sj4))+((r01*sj0*x902))+(((-1.0)*cj1*x904))+(((-1.0)*cj1*x903))+((sj1*x905))+((cj0*r00*x902)))),IKFAST_ATAN2_MAGTHRESH);
if(!x908.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x907.value)))+(x908.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x909=IKcos(j3);
IkReal x910=pz*pz;
IkReal x911=px*px;
IkReal x912=py*py;
IkReal x913=(cj0*r01);
IkReal x914=(r00*sj0);
IkReal x915=(cj1*pz);
IkReal x916=(py*sj1);
IkReal x917=((1.096)*sj0);
IkReal x918=(px*r01);
IkReal x919=(pz*r01);
IkReal x920=(cj0*px);
IkReal x921=((0.999999680000154)*r02);
IkReal x922=(py*r00);
IkReal x923=(px*r02);
IkReal x924=((1.99999936000031)*sj0);
IkReal x925=(r02*sj1);
IkReal x926=((0.000438399859712067)*cj1);
IkReal x927=((0.548)*sj4);
IkReal x928=((0.000799999744000123)*r02);
IkReal x929=(cj0*py);
IkReal x930=((0.000876799719424135)*cj1);
IkReal x931=((0.000876799719424135)*sj1);
IkReal x932=(pz*r02);
IkReal x933=(cj1*r02);
IkReal x934=(cj0*r00);
IkReal x935=((0.000438399859712067)*sj1);
IkReal x936=(px*r00);
IkReal x937=((0.999999680000154)*x912);
IkReal x938=((0.174264)*x909);
IkReal x939=((0.999999680000154)*x911);
IkReal x940=((0.548)*r01*sj0);
IkReal x941=((0.999999680000154)*x910);
evalcond[0]=((((0.547999824640084)*x933))+(((-1.0)*x914*x926))+((x927*(IKsin(j3))))+(((-1.0)*x932))+(((-1.0)*x936))+(((-0.548)*sj1*x934))+(((-1.0)*py*r01))+(((-1.0)*sj1*x940))+((x913*x926)));
evalcond[1]=((0.025281)+(((1.09599964928017)*x915))+(((-1.096)*sj1*x920))+(((-1.0)*x910))+(((-1.0)*x912))+(((-1.0)*x911))+(((-1.0)*px*sj0*x930))+x938+((x929*x930))+(((-1.0)*x916*x917)));
evalcond[2]=((((0.547999824640084)*x925))+((x920*x921))+(((-0.000799999744000123)*x922))+(((-1.0)*x914*x935))+(((-0.999999680000154)*pz*x934))+((x909*x927))+((cj1*x940))+(((0.548)*cj1*x934))+(((0.159)*sj4))+(((-0.999999680000154)*sj0*x919))+(((0.000799999744000123)*x918))+((py*sj0*x921))+((x913*x935)));
evalcond[3]=(((py*x918*x924))+(((-1.096)*x913*x915))+(((-1.99999936000031)*x920*x922))+(((-0.000240243123122213)*r02))+(((-1.0)*x912*x928))+(((0.325585)*cj4))+(((-1.0)*x914*x937))+((x913*x941))+(((-0.000876799719424135)*r02*sj0*x916))+(((-0.000876799719424135)*x920*x925))+(((1.09599964928017)*sj1*x918))+(((-1.0)*x914*x941))+((x914*x939))+((sj0*x919*x931))+(((-1.99999936000031)*x929*x932))+((pz*x931*x934))+(((0.00159999948800025)*py*x919))+(((-1.0)*x913*x937))+(((-0.300303903902766)*x914))+(((0.300303903902766)*x913))+(((1.096)*x914*x915))+((x910*x928))+((pz*x923*x924))+((cj4*x938))+(((0.00159999948800025)*pz*x936))+(((-1.0)*cj1*x917*x923))+(((-1.09599964928017)*r00*x916))+(((1.096)*x929*x933))+((x913*x939))+(((-1.0)*x911*x928)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj4;
j2eval[1]=IKsign(sj4);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x942=(cj3*sj4);
j2eval[0]=(sj4+(((3.44654088050314)*x942)));
j2eval[1]=IKsign(((((159.0)*sj4))+(((548.0)*x942))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=sj4;
j2eval[1]=sj3;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=0;
cj4=1.0;
j4=0;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x943=(cj1*px);
IkReal x944=((548000.0)*cj0);
IkReal x945=((438.399859712067)*sj0);
IkReal x946=(cj1*pz);
IkReal x947=(px*sj1);
IkReal x948=((158999.949120024)*sj3);
IkReal x949=(cj0*py);
IkReal x950=((127.19995929602)*sj3);
IkReal x951=(pz*sj1);
IkReal x952=(cj3*sj0);
IkReal x953=((159000.0)*sj3);
IkReal x954=(py*sj1);
IkReal x955=((158999.949120024)*cj3);
IkReal x956=(cj1*py);
IkReal x957=((548000.0)*sj0);
IkReal x958=((127.19995929602)*cj3);
IkReal x959=((159000.0)*cj0*cj3);
CheckValue<IkReal> x960 = IKatan2WithCheck(IkReal(((((87132.0)*sj3))+((x945*x947))+((cj0*x947*x953))+(((127.19995929602)*x947*x952))+((sj0*x953*x954))+(((-1.0)*x946*x948))+(((-1.0)*x943*x959))+(((-1.0)*sj1*x949*x958))+((sj0*x943*x950))+(((-159000.0)*x952*x956))+(((-1.0)*x956*x957))+(((-1.0)*x943*x944))+(((-547999.824640084)*x951))+(((-438.399859712067)*sj1*x949))+(((-1.0)*x951*x955))+(((-1.0)*cj1*x949*x950)))),IkReal(((-300304.0)+((sj0*x947*x950))+(((-87132.0)*cj3))+(((438.399859712067)*cj1*x949))+((cj1*x949*x958))+(((-1.0)*sj1*x949*x950))+(((547999.824640084)*x946))+(((-1.0)*sj0*x953*x956))+(((-159000.0)*x952*x954))+(((-1.0)*x944*x947))+(((-1.0)*x947*x959))+(((-1.0)*x943*x945))+(((-1.0)*cj0*x943*x953))+((x946*x955))+(((-1.0)*x954*x957))+(((-127.19995929602)*x943*x952))+(((-1.0)*x948*x951)))),IKFAST_ATAN2_MAGTHRESH);
if(!x960.valid){
continue;
}
CheckValue<IkReal> x961=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x961.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x960.value)+(((1.5707963267949)*(x961.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x962=IKcos(j2);
IkReal x963=IKsin(j2);
IkReal x964=(r00*sj0);
IkReal x965=((0.000799999744000123)*r02);
IkReal x966=((0.999999680000154)*sj1);
IkReal x967=(py*r00);
IkReal x968=(py*sj1);
IkReal x969=((1.0)*r02);
IkReal x970=((0.000799999744000123)*cj0);
IkReal x971=(pz*sj1);
IkReal x972=((0.000799999744000123)*sj0);
IkReal x973=(cj1*pz);
IkReal x974=((0.159)*sj3);
IkReal x975=(cj0*r01);
IkReal x976=(px*sj1);
IkReal x977=(px*r01);
IkReal x978=((0.159)*cj3);
IkReal x979=(cj0*cj1);
IkReal x980=((0.999999680000154)*cj1);
IkReal x981=((0.548)*x963);
IkReal x982=((0.548)*x962);
IkReal x983=(cj0*x976);
IkReal x984=(cj1*px*sj0);
IkReal x985=(cj1*py*sj0);
IkReal x986=(x962*x974);
IkReal x987=(x963*x978);
IkReal x988=(x963*x974);
IkReal x989=(x962*x978);
IkReal x990=(x989+x982);
IkReal x991=(x986+x987+x981);
evalcond[0]=((0.548)+(((-1.0)*x988))+((cj1*px*x972))+((sj0*x968))+(((-0.999999680000154)*x973))+x990+x983+(((-1.0)*cj1*py*x970)));
evalcond[1]=((((-1.0)*pz*x966))+(((-1.0)*x985))+(((-1.0)*px*x979))+(((-1.0)*x991))+(((-1.0)*x968*x970))+((x972*x976)));
evalcond[2]=((((-1.0)*x964*x971))+(((-1.0)*x965*x985))+((r00*x970*x973))+((r01*x972*x973))+(((-1.0)*cj0*x968*x969))+((x977*x980))+(((-1.0)*x967*x980))+(((-1.0)*x991))+((x971*x975))+((r02*sj0*x976))+(((-1.0)*px*x965*x979)));
evalcond[3]=((((-1.0)*x965*x983))+((r00*x970*x971))+(((-1.0)*x969*x984))+((r01*x971*x972))+(((-1.0)*x966*x967))+(((-1.0)*x990))+((x966*x977))+(((-1.0)*sj0*x965*x968))+(((0.547999824640084)*x975))+(((-0.000438399859712067)*r02))+(((-1.0)*x973*x975))+((x964*x973))+x988+(((-0.547999824640084)*x964))+((py*r02*x979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j2eval[0]=((1.8683434329523)+cj3);
j2eval[1]=IKsign(((325585.0)+(((174264.0)*cj3))));
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j2]

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x992=(cj1*px);
IkReal x993=((548000.0)*cj0);
IkReal x994=((438.399859712067)*sj0);
IkReal x995=(cj1*pz);
IkReal x996=(px*sj1);
IkReal x997=((158999.949120024)*sj3);
IkReal x998=(cj0*py);
IkReal x999=((127.19995929602)*sj3);
IkReal x1000=(pz*sj1);
IkReal x1001=(cj3*sj0);
IkReal x1002=((159000.0)*sj3);
IkReal x1003=(py*sj1);
IkReal x1004=((158999.949120024)*cj3);
IkReal x1005=(cj1*py);
IkReal x1006=((548000.0)*sj0);
IkReal x1007=((127.19995929602)*cj3);
IkReal x1008=((159000.0)*cj0*cj3);
CheckValue<IkReal> x1009 = IKatan2WithCheck(IkReal(((((-438.399859712067)*sj1*x998))+((cj0*x1002*x996))+(((87132.0)*sj3))+(((-1.0)*sj1*x1007*x998))+((x994*x996))+(((-1.0)*x992*x993))+(((-1.0)*x995*x997))+(((-159000.0)*x1001*x1005))+((sj0*x1002*x1003))+((sj0*x992*x999))+(((-1.0)*x1005*x1006))+(((-1.0)*cj1*x998*x999))+(((-547999.824640084)*x1000))+(((127.19995929602)*x1001*x996))+(((-1.0)*x1000*x1004))+(((-1.0)*x1008*x992)))),IkReal(((-300304.0)+(((-127.19995929602)*x1001*x992))+(((547999.824640084)*x995))+(((-87132.0)*cj3))+(((-1.0)*cj0*x1002*x992))+(((-1.0)*sj1*x998*x999))+(((-1.0)*sj0*x1002*x1005))+(((-1.0)*x992*x994))+(((438.399859712067)*cj1*x998))+(((-159000.0)*x1001*x1003))+(((-1.0)*x1000*x997))+((sj0*x996*x999))+((cj1*x1007*x998))+((x1004*x995))+(((-1.0)*x993*x996))+(((-1.0)*x1003*x1006))+(((-1.0)*x1008*x996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1009.valid){
continue;
}
CheckValue<IkReal> x1010=IKPowWithIntegerCheck(IKsign(((325585.0)+(((174264.0)*cj3)))),-1);
if(!x1010.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1009.value)+(((1.5707963267949)*(x1010.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x1011=IKcos(j2);
IkReal x1012=IKsin(j2);
IkReal x1013=(r00*sj0);
IkReal x1014=((0.000799999744000123)*r02);
IkReal x1015=((0.999999680000154)*sj1);
IkReal x1016=(py*r00);
IkReal x1017=(py*sj1);
IkReal x1018=((1.0)*r02);
IkReal x1019=((0.000799999744000123)*cj0);
IkReal x1020=(pz*sj1);
IkReal x1021=((0.000799999744000123)*sj0);
IkReal x1022=(cj1*pz);
IkReal x1023=((0.159)*sj3);
IkReal x1024=(cj0*r01);
IkReal x1025=(px*sj1);
IkReal x1026=(px*r01);
IkReal x1027=((0.159)*cj3);
IkReal x1028=(cj0*cj1);
IkReal x1029=((0.999999680000154)*cj1);
IkReal x1030=((0.548)*x1012);
IkReal x1031=((0.548)*x1011);
IkReal x1032=(cj0*x1025);
IkReal x1033=(cj1*px*sj0);
IkReal x1034=(cj1*py*sj0);
IkReal x1035=(x1011*x1023);
IkReal x1036=(x1012*x1027);
IkReal x1037=(x1011*x1027);
IkReal x1038=(x1012*x1023);
IkReal x1039=(x1031+x1037);
IkReal x1040=(x1030+x1036+x1035);
evalcond[0]=((0.548)+((cj1*px*x1021))+(((-1.0)*x1038))+x1039+x1032+((sj0*x1017))+(((-1.0)*cj1*py*x1019))+(((-0.999999680000154)*x1022)));
evalcond[1]=((((-1.0)*x1034))+(((-1.0)*x1017*x1019))+(((-1.0)*pz*x1015))+((x1021*x1025))+(((-1.0)*px*x1028))+(((-1.0)*x1040)));
evalcond[2]=(x1040+(((-1.0)*cj0*x1017*x1018))+(((-1.0)*x1013*x1020))+(((-1.0)*x1014*x1034))+((r00*x1019*x1022))+((x1026*x1029))+((r01*x1021*x1022))+((r02*sj0*x1025))+((x1020*x1024))+(((-1.0)*x1016*x1029))+(((-1.0)*px*x1014*x1028)));
evalcond[3]=((((-1.0)*x1038))+x1039+(((-1.0)*x1014*x1032))+((r00*x1019*x1020))+(((-0.547999824640084)*x1013))+((x1015*x1026))+(((0.547999824640084)*x1024))+(((-1.0)*x1015*x1016))+((r01*x1020*x1021))+(((-1.0)*sj0*x1014*x1017))+(((-0.000438399859712067)*r02))+((x1013*x1022))+(((-1.0)*x1022*x1024))+(((-1.0)*x1018*x1033))+((py*r02*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1041=(py*sj1);
IkReal x1042=((0.00113154136350795)*cj0);
IkReal x1043=((1.41442670438494)*pz);
IkReal x1044=((1.41442715700141)*sj0);
IkReal x1045=(cj1*py);
IkReal x1046=((0.00113154136350795)*px*sj0);
IkReal x1047=((1.41442715700141)*cj0*px);
if( IKabs(((((-1.0)*x1044*x1045))+(((-1.0)*cj1*x1047))+(((-1.0)*x1041*x1042))+(((-1.0)*sj1*x1043))+((sj1*x1046)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.775106082036775)+((x1042*x1045))+(((-1.0)*cj1*x1046))+(((-1.0)*x1041*x1044))+((cj1*x1043))+(((-1.0)*sj1*x1047)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1044*x1045))+(((-1.0)*cj1*x1047))+(((-1.0)*x1041*x1042))+(((-1.0)*sj1*x1043))+((sj1*x1046))))+IKsqr(((-0.775106082036775)+((x1042*x1045))+(((-1.0)*cj1*x1046))+(((-1.0)*x1041*x1044))+((cj1*x1043))+(((-1.0)*sj1*x1047))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1044*x1045))+(((-1.0)*cj1*x1047))+(((-1.0)*x1041*x1042))+(((-1.0)*sj1*x1043))+((sj1*x1046))), ((-0.775106082036775)+((x1042*x1045))+(((-1.0)*cj1*x1046))+(((-1.0)*x1041*x1044))+((cj1*x1043))+(((-1.0)*sj1*x1047))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1048=IKcos(j2);
IkReal x1049=IKsin(j2);
IkReal x1050=pz*pz;
IkReal x1051=py*py;
IkReal x1052=px*px;
IkReal x1053=(pz*sj1);
IkReal x1054=(py*sj0);
IkReal x1055=(cj0*r00);
IkReal x1056=(cj1*px);
IkReal x1057=(cj0*r02);
IkReal x1058=((2.0)*px);
IkReal x1059=((0.000799999744000123)*sj1);
IkReal x1060=(cj0*py);
IkReal x1061=((0.999999680000154)*r02);
IkReal x1062=(pz*r00);
IkReal x1063=(cj1*sj0);
IkReal x1064=(px*r00);
IkReal x1065=(cj0*r01);
IkReal x1066=(r00*sj0);
IkReal x1067=((0.000799999744000123)*cj1);
IkReal x1068=((1.09599964928017)*pz);
IkReal x1069=((0.000240243123122213)*sj1);
IkReal x1070=(cj1*py);
IkReal x1071=(r02*sj0);
IkReal x1072=(px*sj1);
IkReal x1073=((0.00159999948800025)*pz);
IkReal x1074=((0.999999680000154)*r01);
IkReal x1075=((0.707)*cj4);
IkReal x1076=((0.000799999744000123)*pz);
IkReal x1077=((0.999999680000154)*r00);
IkReal x1078=(py*sj1);
IkReal x1079=((1.99999936000031)*r01);
IkReal x1080=((0.00159999948800025)*py);
IkReal x1081=((0.300303903902766)*r02);
IkReal x1082=(cj1*pz);
IkReal x1083=((2.0)*r02);
IkReal x1084=((1.0)*r01);
IkReal x1085=((0.000799999744000123)*r00);
IkReal x1086=((1.0)*cj1);
IkReal x1087=(r01*sj0*sj1);
IkReal x1088=((1.0)*x1051);
IkReal x1089=(sj1*x1050);
IkReal x1090=(sj1*x1052);
IkReal x1091=((1.0)*x1050);
IkReal x1092=(cj1*x1051);
IkReal x1093=(sj1*x1051);
IkReal x1094=(sj4*x1049);
IkReal x1095=(sj4*x1048);
IkReal x1096=(cj1*x1052);
evalcond[0]=(x1094+x1087+((x1063*x1085))+(((-1.0)*cj1*x1061))+((sj1*x1055))+(((-1.0)*x1065*x1067)));
evalcond[1]=((0.548)+(((0.000799999744000123)*sj0*x1056))+(((-1.0)*x1060*x1067))+(((-0.999999680000154)*x1082))+((cj0*x1072))+((sj1*x1054))+(((0.707)*x1048)));
evalcond[2]=(x1095+(((-1.0)*x1059*x1065))+(((-1.0)*x1063*x1084))+(((-1.0)*sj1*x1061))+(((-1.0)*x1055*x1086))+((x1059*x1066)));
evalcond[3]=((((-0.999999680000154)*x1053))+(((-1.0)*x1059*x1060))+((px*sj0*x1059))+(((-1.0)*x1054*x1086))+(((-1.0)*cj0*x1056))+(((-0.707)*x1049)));
evalcond[4]=(((r01*x1063*x1076))+(((-1.0)*x1057*x1078))+((x1056*x1074))+(((-1.0)*x1070*x1077))+((x1071*x1072))+((pz*x1055*x1067))+(((-0.000799999744000123)*x1056*x1057))+((x1053*x1065))+(((-1.0)*x1053*x1066))+(((-1.0)*x1049*x1075))+(((-1.0)*r02*x1054*x1067)));
evalcond[5]=((((-1.0)*x1056*x1071))+(((0.547999824640084)*x1065))+(((-1.0)*x1077*x1078))+(((-0.547999824640084)*x1066))+(((0.000799999744000123)*r01*sj0*x1053))+(((-1.0)*x1065*x1082))+(((0.000799999744000123)*x1053*x1055))+((x1057*x1070))+((x1062*x1063))+(((-1.0)*x1048*x1075))+(((-0.000438399859712067)*r02))+(((-1.0)*px*x1057*x1059))+((x1072*x1074))+(((-1.0)*r02*x1054*x1059)));
evalcond[6]=(((x1052*x1087))+(((-1.0)*x1053*x1054*x1083))+(((-1.0)*x1055*x1090))+(((-0.00159999948800025)*r01*x1054*x1056))+(((-1.0)*x1052*x1063*x1085))+((cj1*x1081))+(((1.99999936000031)*x1056*x1062))+(((-1.0)*x1061*x1092))+(((-1.0)*x1061*x1096))+(((-0.300304)*x1087))+(((-1.096)*x1064))+((cj1*x1050*x1061))+((x1051*x1063*x1085))+(((0.000240243123122213)*cj1*x1065))+(((-1.096)*py*r01))+(((-1.0)*sj0*x1084*x1093))+(((-1.0)*x1052*x1065*x1067))+(((-1.0)*x1056*x1071*x1073))+((x1055*x1093))+((x1050*x1087))+(((-1.0)*x1053*x1057*x1058))+(((-1.096)*pz*r02))+(((-0.300304)*sj1*x1055))+((x1055*x1056*x1080))+((pz*x1070*x1079))+((x1057*x1070*x1073))+((x1051*x1065*x1067))+(((-1.0)*r01*sj1*x1058*x1060))+(((0.499849)*x1094))+(((-0.000240243123122213)*r00*x1063))+((x1055*x1089))+(((-1.0)*x1050*x1065*x1067))+((x1050*x1063*x1085))+(((-1.0)*r00*sj1*x1054*x1058)));
evalcond[7]=((((-1.0)*x1051*x1055*x1086))+(((-1.0)*x1050*x1063*x1084))+(((-1.0)*sj1*x1081))+((r01*x1051*x1063))+((x1055*x1068))+(((-1.09599964928017)*r02*x1054))+(((-1.0)*x1052*x1063*x1084))+((x1061*x1089))+((x1055*x1072*x1080))+(((2.0)*r01*x1056*x1060))+(((-0.00159999948800025)*r01*x1054*x1072))+((r01*sj0*x1068))+((py*x1053*x1079))+(((-0.00159999948800025)*px*x1053*x1071))+((x1054*x1082*x1083))+(((-1.0)*x1061*x1093))+(((-1.0)*x1061*x1090))+(((-0.300304)*r01*x1063))+((x1066*x1069))+(((-1.0)*x1050*x1059*x1065))+((x1051*x1059*x1065))+((x1051*x1059*x1066))+(((1.99999936000031)*x1053*x1064))+((x1055*x1096))+(((2.0)*r00*x1054*x1056))+(((2.0)*pz*x1056*x1057))+(((-0.300304)*cj1*x1055))+(((-1.0)*x1050*x1055*x1086))+(((0.000876799719424135)*py*r00))+((x1053*x1057*x1080))+(((0.499849)*x1095))+(((-0.000876799719424135)*px*r01))+(((-1.0)*x1065*x1069))+(((-1.0)*x1052*x1059*x1065))+(((-1.0)*x1052*x1059*x1066))+(((-1.09599964928017)*px*x1057))+((x1050*x1059*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1097=((0.00205655461182551)*cj1);
IkReal x1098=(cj0*py);
IkReal x1099=(px*sj0);
IkReal x1100=((2.57069326478189)*pz);
IkReal x1101=((0.00205655461182551)*sj1);
IkReal x1102=((2.5706940874036)*py*sj0);
IkReal x1103=((2.5706940874036)*cj0*px);
if( IKabs(((((-1.0)*x1098*x1101))+(((-1.0)*sj1*x1100))+(((-1.0)*cj1*x1102))+(((-1.0)*cj1*x1103))+((x1099*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.40874035989717)+(((-1.0)*x1097*x1099))+(((-1.0)*sj1*x1103))+(((-1.0)*sj1*x1102))+((cj1*x1100))+((x1097*x1098)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1098*x1101))+(((-1.0)*sj1*x1100))+(((-1.0)*cj1*x1102))+(((-1.0)*cj1*x1103))+((x1099*x1101))))+IKsqr(((-1.40874035989717)+(((-1.0)*x1097*x1099))+(((-1.0)*sj1*x1103))+(((-1.0)*sj1*x1102))+((cj1*x1100))+((x1097*x1098))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1098*x1101))+(((-1.0)*sj1*x1100))+(((-1.0)*cj1*x1102))+(((-1.0)*cj1*x1103))+((x1099*x1101))), ((-1.40874035989717)+(((-1.0)*x1097*x1099))+(((-1.0)*sj1*x1103))+(((-1.0)*sj1*x1102))+((cj1*x1100))+((x1097*x1098))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1104=IKsin(j2);
IkReal x1105=IKcos(j2);
IkReal x1106=pz*pz;
IkReal x1107=py*py;
IkReal x1108=px*px;
IkReal x1109=((0.151321)*sj4);
IkReal x1110=(pz*sj1);
IkReal x1111=(py*sj0);
IkReal x1112=(cj0*r00);
IkReal x1113=(cj1*px);
IkReal x1114=(cj0*r02);
IkReal x1115=((2.0)*px);
IkReal x1116=((0.000799999744000123)*sj1);
IkReal x1117=(cj0*py);
IkReal x1118=((0.999999680000154)*r02);
IkReal x1119=(pz*r00);
IkReal x1120=(cj1*sj0);
IkReal x1121=((1.0)*sj4);
IkReal x1122=(px*r00);
IkReal x1123=(cj0*r01);
IkReal x1124=(r00*sj0);
IkReal x1125=((0.000799999744000123)*cj1);
IkReal x1126=((1.09599964928017)*pz);
IkReal x1127=((0.000240243123122213)*sj1);
IkReal x1128=(cj1*py);
IkReal x1129=(px*sj1);
IkReal x1130=(r02*sj0);
IkReal x1131=((0.999999680000154)*r01);
IkReal x1132=((0.000799999744000123)*pz);
IkReal x1133=((0.999999680000154)*r00);
IkReal x1134=(py*sj1);
IkReal x1135=((0.00159999948800025)*pz);
IkReal x1136=((1.99999936000031)*r01);
IkReal x1137=((0.00159999948800025)*py);
IkReal x1138=((0.300303903902766)*r02);
IkReal x1139=(cj1*pz);
IkReal x1140=((2.0)*r02);
IkReal x1141=((1.0)*r01);
IkReal x1142=((0.000799999744000123)*r00);
IkReal x1143=((1.0)*cj1);
IkReal x1144=(r01*sj0*sj1);
IkReal x1145=((1.0)*x1107);
IkReal x1146=(sj1*x1106);
IkReal x1147=(sj1*x1108);
IkReal x1148=((0.389)*x1105);
IkReal x1149=((1.0)*x1106);
IkReal x1150=(cj1*x1107);
IkReal x1151=(sj1*x1107);
IkReal x1152=((0.389)*x1104);
IkReal x1153=(cj1*x1108);
evalcond[0]=(x1144+(((-1.0)*x1123*x1125))+(((-1.0)*cj1*x1118))+(((-1.0)*x1104*x1121))+((x1120*x1142))+((sj1*x1112)));
evalcond[1]=((0.548)+x1148+(((0.000799999744000123)*sj0*x1113))+(((-1.0)*x1117*x1125))+((cj0*x1129))+(((-0.999999680000154)*x1139))+((sj1*x1111)));
evalcond[2]=(((px*sj0*x1116))+(((-1.0)*x1152))+(((-1.0)*x1116*x1117))+(((-1.0)*cj0*x1113))+(((-1.0)*x1111*x1143))+(((-0.999999680000154)*x1110)));
evalcond[3]=((((-1.0)*x1120*x1141))+(((-1.0)*x1116*x1123))+(((-1.0)*sj1*x1118))+(((-1.0)*x1112*x1143))+(((-1.0)*x1105*x1121))+((x1116*x1124)));
evalcond[4]=((((-0.000799999744000123)*x1113*x1114))+(((-1.0)*r02*x1111*x1125))+((pz*x1112*x1125))+((x1129*x1130))+((x1110*x1123))+((x1113*x1131))+(((-1.0)*x1110*x1124))+(((-1.0)*cj4*x1152))+(((-1.0)*x1114*x1134))+(((-1.0)*x1128*x1133))+((r01*x1120*x1132)));
evalcond[5]=(((x1114*x1128))+(((0.000799999744000123)*r01*sj0*x1110))+((x1129*x1131))+(((-1.0)*r02*x1111*x1116))+((x1119*x1120))+(((-0.547999824640084)*x1124))+(((0.000799999744000123)*x1110*x1112))+(((-1.0)*cj4*x1148))+(((-1.0)*x1123*x1139))+(((-1.0)*x1113*x1130))+(((0.547999824640084)*x1123))+(((-0.000438399859712067)*r02))+(((-1.0)*x1133*x1134))+(((-1.0)*px*x1114*x1116)));
evalcond[6]=(((x1114*x1128*x1135))+(((-0.300304)*sj1*x1112))+(((-1.0)*x1108*x1123*x1125))+((pz*x1128*x1136))+((x1112*x1146))+((x1112*x1113*x1137))+(((-1.0)*x1108*x1120*x1142))+(((-1.0)*x1118*x1153))+(((-1.0)*x1118*x1150))+(((-1.0)*x1113*x1130*x1135))+(((-0.300304)*x1144))+(((-1.096)*x1122))+(((-1.0)*x1110*x1114*x1115))+(((-1.0)*r00*sj1*x1111*x1115))+(((-1.0)*x1106*x1123*x1125))+(((-1.0)*sj0*x1141*x1151))+((x1108*x1144))+((cj1*x1106*x1118))+(((-1.096)*py*r01))+((x1106*x1144))+((x1107*x1120*x1142))+((x1107*x1123*x1125))+(((-1.096)*pz*r02))+(((-1.0)*x1110*x1111*x1140))+(((-1.0)*x1112*x1147))+((x1106*x1120*x1142))+(((0.000240243123122213)*cj1*x1123))+(((-1.0)*x1104*x1109))+((cj1*x1138))+(((-1.0)*r01*sj1*x1115*x1117))+(((-0.000240243123122213)*r00*x1120))+(((-0.00159999948800025)*r01*x1111*x1113))+(((1.99999936000031)*x1113*x1119))+((x1112*x1151)));
evalcond[7]=((((-1.0)*x1118*x1147))+((x1107*x1116*x1124))+((x1107*x1116*x1123))+(((-1.0)*x1108*x1116*x1124))+(((-1.0)*x1108*x1116*x1123))+((x1106*x1116*x1124))+(((-1.0)*sj1*x1138))+((r01*sj0*x1126))+(((-1.0)*x1108*x1120*x1141))+(((-1.0)*x1118*x1151))+((x1118*x1146))+((x1111*x1139*x1140))+(((1.99999936000031)*x1110*x1122))+(((-1.0)*x1123*x1127))+(((-0.00159999948800025)*px*x1110*x1130))+(((-0.300304)*cj1*x1112))+((x1124*x1127))+((x1112*x1126))+(((-0.300304)*r01*x1120))+((r01*x1107*x1120))+((x1112*x1129*x1137))+((py*x1110*x1136))+(((2.0)*r00*x1111*x1113))+((x1110*x1114*x1137))+(((-1.0)*x1106*x1112*x1143))+(((2.0)*pz*x1113*x1114))+(((-1.0)*x1107*x1112*x1143))+(((0.000876799719424135)*py*r00))+(((2.0)*r01*x1113*x1117))+(((-1.09599964928017)*px*x1114))+(((-0.000876799719424135)*px*r01))+(((-1.09599964928017)*r02*x1111))+(((-1.0)*x1106*x1116*x1123))+(((-1.0)*x1106*x1120*x1141))+(((-0.00159999948800025)*r01*x1111*x1129))+(((-1.0)*x1105*x1109))+((x1112*x1153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj3)))))+(IKabs(((0.29014598540146)+cj3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1154=(pz*sj1);
IkReal x1155=(cj0*cj1);
IkReal x1156=((1.82481751713555)*px);
IkReal x1157=((0.00145985354655538)*py);
IkReal x1158=(cj0*sj1);
IkReal x1159=(sj0*sj1);
IkReal x1160=((0.000442610698939436)*py);
IkReal x1161=((0.000442610698939436)*px);
IkReal x1162=(cj1*sj0);
IkReal x1163=((0.553263550718546)*px);
IkReal x1164=(cj1*pz);
IkReal x1165=((0.00145985354655538)*px);
IkReal x1166=(py*x1162);
if( IKabs(((0.303188425793763)+(((-1.82481751713555)*x1166))+((x1159*x1165))+(((-1.0)*x1157*x1158))+(((-1.0)*x1155*x1156))+(((0.553263550718546)*py*x1159))+(((-1.0)*x1155*x1160))+((x1158*x1163))+(((-0.553263373674295)*x1164))+(((-1.82481693319422)*x1154))+((x1161*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.999999999390279)+((x1159*x1161))+(((-1.82481751713555)*py*x1159))+(((-0.553263373674295)*x1154))+(((-1.0)*x1158*x1160))+(((-0.553263550718546)*x1166))+(((-1.0)*x1162*x1165))+(((1.82481693319422)*x1164))+(((-1.0)*x1156*x1158))+(((-1.0)*x1155*x1163))+((x1155*x1157)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.303188425793763)+(((-1.82481751713555)*x1166))+((x1159*x1165))+(((-1.0)*x1157*x1158))+(((-1.0)*x1155*x1156))+(((0.553263550718546)*py*x1159))+(((-1.0)*x1155*x1160))+((x1158*x1163))+(((-0.553263373674295)*x1164))+(((-1.82481693319422)*x1154))+((x1161*x1162))))+IKsqr(((-0.999999999390279)+((x1159*x1161))+(((-1.82481751713555)*py*x1159))+(((-0.553263373674295)*x1154))+(((-1.0)*x1158*x1160))+(((-0.553263550718546)*x1166))+(((-1.0)*x1162*x1165))+(((1.82481693319422)*x1164))+(((-1.0)*x1156*x1158))+(((-1.0)*x1155*x1163))+((x1155*x1157))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((0.303188425793763)+(((-1.82481751713555)*x1166))+((x1159*x1165))+(((-1.0)*x1157*x1158))+(((-1.0)*x1155*x1156))+(((0.553263550718546)*py*x1159))+(((-1.0)*x1155*x1160))+((x1158*x1163))+(((-0.553263373674295)*x1164))+(((-1.82481693319422)*x1154))+((x1161*x1162))), ((-0.999999999390279)+((x1159*x1161))+(((-1.82481751713555)*py*x1159))+(((-0.553263373674295)*x1154))+(((-1.0)*x1158*x1160))+(((-0.553263550718546)*x1166))+(((-1.0)*x1162*x1165))+(((1.82481693319422)*x1164))+(((-1.0)*x1156*x1158))+(((-1.0)*x1155*x1163))+((x1155*x1157))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1167=IKcos(j2);
IkReal x1168=IKsin(j2);
IkReal x1169=pz*pz;
IkReal x1170=py*py;
IkReal x1171=px*px;
IkReal x1172=(pz*sj1);
IkReal x1173=(py*sj0);
IkReal x1174=(cj0*r00);
IkReal x1175=(cj1*px);
IkReal x1176=(cj0*r02);
IkReal x1177=((2.0)*px);
IkReal x1178=((0.000799999744000123)*sj1);
IkReal x1179=(cj0*py);
IkReal x1180=((0.999999680000154)*r02);
IkReal x1181=(pz*r00);
IkReal x1182=(cj1*sj0);
IkReal x1183=(px*r00);
IkReal x1184=(cj0*r01);
IkReal x1185=(r00*sj0);
IkReal x1186=((0.000799999744000123)*cj1);
IkReal x1187=((0.000240243123122213)*sj1);
IkReal x1188=(cj1*py);
IkReal x1189=(px*sj1);
IkReal x1190=(r02*sj0);
IkReal x1191=((0.999999680000154)*r01);
IkReal x1192=((0.000799999744000123)*pz);
IkReal x1193=((0.999999680000154)*r00);
IkReal x1194=(py*sj1);
IkReal x1195=((0.00159999948800025)*pz);
IkReal x1196=((1.99999936000031)*r01);
IkReal x1197=((0.00159999948800025)*py);
IkReal x1198=((0.300303903902766)*r02);
IkReal x1199=(cj1*pz);
IkReal x1200=((2.0)*r02);
IkReal x1201=((1.0)*r01);
IkReal x1202=((1.09599964928017)*pz);
IkReal x1203=((0.000799999744000123)*r00);
IkReal x1204=((1.0)*cj1);
IkReal x1205=(r01*sj0*sj1);
IkReal x1206=((1.0)*x1170);
IkReal x1207=(sj1*x1169);
IkReal x1208=(sj1*x1171);
IkReal x1209=((1.0)*x1169);
IkReal x1210=(cj1*x1170);
IkReal x1211=((0.501866788314433)*x1168);
IkReal x1212=(sj4*x1168);
IkReal x1213=((0.1521602016)*x1168);
IkReal x1214=((0.1521602016)*x1167);
IkReal x1215=(sj1*x1170);
IkReal x1216=((0.501866788314433)*x1167);
IkReal x1217=(sj4*x1167);
IkReal x1218=(cj1*x1171);
evalcond[0]=((0.548)+x1216+((sj1*x1173))+((cj0*x1189))+(((-1.0)*x1179*x1186))+(((0.000799999744000123)*sj0*x1175))+(((-0.999999680000154)*x1199))+(((-1.0)*x1213)));
evalcond[1]=(x1205+((sj1*x1174))+((x1182*x1203))+(((-0.290145985443817)*x1212))+(((0.9569824)*x1217))+(((-1.0)*x1184*x1186))+(((-1.0)*cj1*x1180)));
evalcond[2]=((((-1.0)*cj0*x1175))+(((-0.999999680000154)*x1172))+(((-1.0)*x1178*x1179))+(((-1.0)*x1173*x1204))+((px*sj0*x1178))+(((-1.0)*x1214))+(((-1.0)*x1211)));
evalcond[3]=((((-1.0)*sj1*x1180))+((x1178*x1185))+(((-0.290145985443817)*x1217))+(((-1.0)*x1178*x1184))+(((-1.0)*x1174*x1204))+(((-0.9569824)*x1212))+(((-1.0)*x1182*x1201)));
evalcond[4]=(((r01*x1182*x1192))+((pz*x1174*x1186))+(((-1.0)*x1188*x1193))+((x1189*x1190))+((x1172*x1184))+((x1175*x1191))+(((-1.0)*x1172*x1185))+(((-0.000799999744000123)*x1175*x1176))+(((-1.0)*x1176*x1194))+(((-1.0)*cj4*x1214))+(((-1.0)*cj4*x1211))+(((-1.0)*r02*x1173*x1186)));
evalcond[5]=((((-1.0)*x1193*x1194))+(((-1.0)*r02*x1173*x1178))+((cj4*x1213))+((x1176*x1188))+((x1189*x1191))+(((-0.547999824640084)*x1185))+((x1181*x1182))+(((-1.0)*x1184*x1199))+(((-0.000438399859712067)*r02))+(((-1.0)*x1175*x1190))+(((-1.0)*px*x1176*x1178))+(((0.000799999744000123)*x1172*x1174))+(((0.000799999744000123)*r01*sj0*x1172))+(((0.547999824640084)*x1184))+(((-1.0)*cj4*x1216)));
evalcond[6]=((((-0.2631921705952)*x1217))+(((-0.300304)*sj1*x1174))+((x1174*x1207))+(((-1.0)*x1171*x1182*x1203))+(((-1.0)*sj0*x1201*x1215))+(((-1.096)*x1183))+(((-1.0)*x1172*x1176*x1177))+(((-1.0)*x1180*x1218))+(((-1.0)*x1180*x1210))+((x1174*x1215))+((cj1*x1169*x1180))+((x1170*x1184*x1186))+(((-1.0)*r01*sj1*x1177*x1179))+((x1171*x1205))+((x1169*x1205))+(((-1.096)*py*r01))+((x1174*x1175*x1197))+((pz*x1188*x1196))+(((1.99999936000031)*x1175*x1181))+((x1169*x1182*x1203))+(((-1.096)*pz*r02))+(((-0.00159999948800025)*r01*x1173*x1175))+(((-1.0)*r00*sj1*x1173*x1177))+(((-1.0)*x1175*x1190*x1195))+(((-0.300304)*x1205))+(((-1.0)*x1171*x1184*x1186))+(((0.0797968193292749)*x1212))+(((-1.0)*x1174*x1208))+(((0.000240243123122213)*cj1*x1184))+((cj1*x1198))+(((-1.0)*x1169*x1184*x1186))+((x1170*x1182*x1203))+((x1176*x1188*x1195))+(((-1.0)*x1172*x1173*x1200))+(((-0.000240243123122213)*r00*x1182)));
evalcond[7]=(((x1173*x1199*x1200))+((x1174*x1202))+(((-1.0)*x1171*x1182*x1201))+((r01*sj0*x1202))+(((-0.00159999948800025)*r01*x1173*x1189))+(((-1.0)*x1169*x1182*x1201))+(((-1.0)*x1171*x1178*x1184))+(((-1.0)*x1171*x1178*x1185))+((x1170*x1178*x1184))+((x1170*x1178*x1185))+((x1180*x1207))+((x1169*x1178*x1185))+(((-1.0)*x1170*x1174*x1204))+(((1.99999936000031)*x1172*x1183))+(((-1.0)*x1180*x1215))+((x1174*x1218))+(((-1.0)*x1169*x1178*x1184))+(((2.0)*r01*x1175*x1179))+((x1185*x1187))+((x1172*x1176*x1197))+(((-1.0)*x1184*x1187))+(((-1.09599964928017)*px*x1176))+(((-1.09599964928017)*r02*x1173))+(((-0.300304)*cj1*x1174))+(((-0.00159999948800025)*px*x1172*x1190))+(((-0.300304)*r01*x1182))+(((-1.0)*x1169*x1174*x1204))+(((-1.0)*x1180*x1208))+(((0.2631921705952)*x1212))+(((2.0)*pz*x1175*x1176))+((r01*x1170*x1182))+(((0.0797968193292749)*x1217))+(((0.000876799719424135)*py*r00))+(((2.0)*r00*x1173*x1175))+(((-0.000876799719424135)*px*r01))+((x1174*x1189*x1197))+(((-1.0)*sj1*x1198))+((py*x1172*x1196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.29014598540146)+cj3)))+(IKabs(((1.0)+(IKsign(sj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1219=(pz*sj1);
IkReal x1220=(cj0*cj1);
IkReal x1221=((1.82481751713555)*px);
IkReal x1222=((0.00145985354655538)*py);
IkReal x1223=(cj0*sj1);
IkReal x1224=(sj0*sj1);
IkReal x1225=((0.000442610698939436)*py);
IkReal x1226=((0.000442610698939436)*px);
IkReal x1227=(cj1*sj0);
IkReal x1228=((0.553263550718546)*px);
IkReal x1229=(cj1*pz);
IkReal x1230=((0.00145985354655538)*px);
IkReal x1231=(py*x1227);
if( IKabs(((-0.303188425793763)+(((-0.553263550718546)*py*x1224))+(((-1.0)*x1220*x1221))+(((-1.82481751713555)*x1231))+(((-1.0)*x1226*x1227))+((x1224*x1230))+(((-1.0)*x1222*x1223))+(((-1.82481693319422)*x1219))+((x1220*x1225))+(((0.553263373674295)*x1229))+(((-1.0)*x1223*x1228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.999999999390279)+(((-1.0)*x1224*x1226))+((x1223*x1225))+(((0.553263373674295)*x1219))+(((-1.0)*x1221*x1223))+(((-1.0)*x1227*x1230))+((x1220*x1228))+((x1220*x1222))+(((-1.82481751713555)*py*x1224))+(((0.553263550718546)*x1231))+(((1.82481693319422)*x1229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.303188425793763)+(((-0.553263550718546)*py*x1224))+(((-1.0)*x1220*x1221))+(((-1.82481751713555)*x1231))+(((-1.0)*x1226*x1227))+((x1224*x1230))+(((-1.0)*x1222*x1223))+(((-1.82481693319422)*x1219))+((x1220*x1225))+(((0.553263373674295)*x1229))+(((-1.0)*x1223*x1228))))+IKsqr(((-0.999999999390279)+(((-1.0)*x1224*x1226))+((x1223*x1225))+(((0.553263373674295)*x1219))+(((-1.0)*x1221*x1223))+(((-1.0)*x1227*x1230))+((x1220*x1228))+((x1220*x1222))+(((-1.82481751713555)*py*x1224))+(((0.553263550718546)*x1231))+(((1.82481693319422)*x1229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-0.303188425793763)+(((-0.553263550718546)*py*x1224))+(((-1.0)*x1220*x1221))+(((-1.82481751713555)*x1231))+(((-1.0)*x1226*x1227))+((x1224*x1230))+(((-1.0)*x1222*x1223))+(((-1.82481693319422)*x1219))+((x1220*x1225))+(((0.553263373674295)*x1229))+(((-1.0)*x1223*x1228))), ((-0.999999999390279)+(((-1.0)*x1224*x1226))+((x1223*x1225))+(((0.553263373674295)*x1219))+(((-1.0)*x1221*x1223))+(((-1.0)*x1227*x1230))+((x1220*x1228))+((x1220*x1222))+(((-1.82481751713555)*py*x1224))+(((0.553263550718546)*x1231))+(((1.82481693319422)*x1229))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1232=IKcos(j2);
IkReal x1233=IKsin(j2);
IkReal x1234=pz*pz;
IkReal x1235=py*py;
IkReal x1236=px*px;
IkReal x1237=(pz*sj1);
IkReal x1238=(py*sj0);
IkReal x1239=(cj0*r00);
IkReal x1240=(cj1*px);
IkReal x1241=(cj0*r02);
IkReal x1242=((2.0)*px);
IkReal x1243=((0.000799999744000123)*sj1);
IkReal x1244=(cj0*py);
IkReal x1245=((0.999999680000154)*r02);
IkReal x1246=(pz*r00);
IkReal x1247=(cj1*sj0);
IkReal x1248=(px*r00);
IkReal x1249=(cj0*r01);
IkReal x1250=(r00*sj0);
IkReal x1251=((0.000799999744000123)*cj1);
IkReal x1252=((0.000240243123122213)*sj1);
IkReal x1253=(cj1*py);
IkReal x1254=(px*sj1);
IkReal x1255=(r02*sj0);
IkReal x1256=((0.999999680000154)*r01);
IkReal x1257=((0.000799999744000123)*pz);
IkReal x1258=((0.999999680000154)*r00);
IkReal x1259=(py*sj1);
IkReal x1260=((0.00159999948800025)*pz);
IkReal x1261=((1.99999936000031)*r01);
IkReal x1262=((0.00159999948800025)*py);
IkReal x1263=((0.300303903902766)*r02);
IkReal x1264=(cj1*pz);
IkReal x1265=((2.0)*r02);
IkReal x1266=((1.0)*r01);
IkReal x1267=((1.09599964928017)*pz);
IkReal x1268=((0.000799999744000123)*r00);
IkReal x1269=((1.0)*cj1);
IkReal x1270=(r01*sj0*sj1);
IkReal x1271=((1.0)*x1235);
IkReal x1272=(sj1*x1234);
IkReal x1273=(sj1*x1236);
IkReal x1274=((1.0)*x1234);
IkReal x1275=(cj1*x1235);
IkReal x1276=((0.501866788314433)*x1233);
IkReal x1277=(sj4*x1233);
IkReal x1278=((0.1521602016)*x1233);
IkReal x1279=((0.1521602016)*x1232);
IkReal x1280=(sj1*x1235);
IkReal x1281=((0.501866788314433)*x1232);
IkReal x1282=(sj4*x1232);
IkReal x1283=(cj1*x1236);
evalcond[0]=((0.548)+((sj1*x1238))+x1278+x1281+((cj0*x1254))+(((-0.999999680000154)*x1264))+(((0.000799999744000123)*sj0*x1240))+(((-1.0)*x1244*x1251)));
evalcond[1]=(((sj1*x1239))+(((-1.0)*x1249*x1251))+x1270+((x1247*x1268))+(((-1.0)*cj1*x1245))+(((-0.9569824)*x1282))+(((-0.290145985443817)*x1277)));
evalcond[2]=((((-1.0)*x1238*x1269))+x1279+(((-0.999999680000154)*x1237))+(((-1.0)*x1276))+(((-1.0)*x1243*x1244))+(((-1.0)*cj0*x1240))+((px*sj0*x1243)));
evalcond[3]=((((-1.0)*sj1*x1245))+(((0.9569824)*x1277))+((x1243*x1250))+(((-0.290145985443817)*x1282))+(((-1.0)*x1243*x1249))+(((-1.0)*x1247*x1266))+(((-1.0)*x1239*x1269)));
evalcond[4]=(((pz*x1239*x1251))+((r01*x1247*x1257))+(((-1.0)*x1253*x1258))+(((-1.0)*x1237*x1250))+(((-1.0)*x1241*x1259))+((x1254*x1255))+(((-0.000799999744000123)*x1240*x1241))+((x1240*x1256))+(((-1.0)*cj4*x1276))+(((-1.0)*r02*x1238*x1251))+((cj4*x1279))+((x1237*x1249)));
evalcond[5]=((((-1.0)*x1258*x1259))+(((-1.0)*px*x1241*x1243))+(((-1.0)*x1240*x1255))+((x1241*x1253))+(((0.000799999744000123)*x1237*x1239))+(((-1.0)*r02*x1238*x1243))+(((-1.0)*x1249*x1264))+((x1246*x1247))+(((-0.547999824640084)*x1250))+((x1254*x1256))+(((-0.000438399859712067)*r02))+(((-1.0)*cj4*x1278))+(((-1.0)*cj4*x1281))+(((0.000799999744000123)*r01*sj0*x1237))+(((0.547999824640084)*x1249)));
evalcond[6]=((((-0.000240243123122213)*r00*x1247))+((cj1*x1234*x1245))+(((-1.0)*r01*sj1*x1242*x1244))+(((-1.0)*x1245*x1283))+((x1241*x1253*x1260))+(((-1.096)*x1248))+(((0.0797968193292749)*x1277))+(((-1.0)*x1237*x1241*x1242))+(((-1.0)*x1245*x1275))+((x1235*x1249*x1251))+((x1235*x1247*x1268))+(((-1.0)*x1236*x1247*x1268))+((x1236*x1270))+(((-1.096)*py*r01))+(((-1.0)*x1240*x1255*x1260))+((x1239*x1272))+(((-1.0)*x1239*x1273))+(((-0.300304)*x1270))+((x1234*x1270))+(((-1.096)*pz*r02))+((cj1*x1263))+(((-0.00159999948800025)*r01*x1238*x1240))+((x1239*x1280))+(((1.99999936000031)*x1240*x1246))+(((0.2631921705952)*x1282))+(((-1.0)*x1237*x1238*x1265))+((pz*x1253*x1261))+((x1234*x1247*x1268))+(((-1.0)*x1234*x1249*x1251))+((x1239*x1240*x1262))+(((0.000240243123122213)*cj1*x1249))+(((-1.0)*x1236*x1249*x1251))+(((-1.0)*r00*sj1*x1238*x1242))+(((-1.0)*sj0*x1266*x1280))+(((-0.300304)*sj1*x1239)));
evalcond[7]=(((x1239*x1254*x1262))+(((-1.0)*x1236*x1243*x1249))+(((-1.0)*x1249*x1252))+(((-1.0)*x1234*x1243*x1249))+((x1245*x1272))+(((2.0)*r00*x1238*x1240))+(((2.0)*r01*x1240*x1244))+(((-1.0)*x1234*x1247*x1266))+((x1235*x1243*x1250))+(((-1.0)*x1245*x1280))+(((-1.09599964928017)*r02*x1238))+((py*x1237*x1261))+((x1237*x1241*x1262))+((r01*sj0*x1267))+(((-1.0)*x1236*x1243*x1250))+(((-1.09599964928017)*px*x1241))+(((-1.0)*x1245*x1273))+((r01*x1235*x1247))+(((-0.00159999948800025)*r01*x1238*x1254))+(((-0.300304)*r01*x1247))+(((-0.2631921705952)*x1277))+(((-1.0)*x1234*x1239*x1269))+(((-0.300304)*cj1*x1239))+(((-1.0)*x1236*x1247*x1266))+(((-1.0)*sj1*x1263))+(((1.99999936000031)*x1237*x1248))+((x1250*x1252))+(((2.0)*pz*x1240*x1241))+(((-0.00159999948800025)*px*x1237*x1255))+((x1239*x1267))+((x1235*x1243*x1249))+((x1239*x1283))+(((0.000876799719424135)*py*r00))+((x1238*x1264*x1265))+((x1234*x1243*x1250))+(((-0.000876799719424135)*px*r01))+(((0.0797968193292749)*x1282))+(((-1.0)*x1235*x1239*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(sj4,-1);
if(!x1300.valid){
continue;
}
IkReal x1284=x1300.value;
IkReal x1285=(cj0*cj3);
IkReal x1286=(py*sj0);
IkReal x1287=((0.12719995929602)*cj1);
IkReal x1288=(r00*sj0);
IkReal x1289=(sj1*sj4);
IkReal x1290=((999.999680000154)*pz);
IkReal x1291=((0.438399859712067)*cj1);
IkReal x1292=(cj0*r01);
IkReal x1293=(cj1*r02);
IkReal x1294=(r01*sj0*sj1);
IkReal x1295=((1000.0)*cj1*sj4);
IkReal x1296=((-0.00182481751824818)*x1284);
IkReal x1297=(cj0*r00*sj1);
IkReal x1298=((0.799999744000123)*px*sj0);
IkReal x1299=((0.799999744000123)*cj0*py*x1289);
CheckValue<IkReal> x1301=IKPowWithIntegerCheck(sj3,-1);
if(!x1301.valid){
continue;
}
if( IKabs((x1296*((x1299+((x1287*x1292))+((x1286*x1295))+(((-1.0)*x1289*x1298))+(((158.999949120024)*x1293))+(((-159.0)*x1297))+(((-159.0)*x1294))+((cj0*px*x1295))+(((-1.0)*x1287*x1288))+((x1289*x1290)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((x1296*(x1301.value)*(((((-1.0)*px*x1285*x1295))+((cj3*x1287*x1288))+(((-547.999824640084)*x1293))+(((-1.0)*cj3*x1289*x1290))+(((-1.0)*cj3*x1286*x1295))+(((548.0)*x1294))+(((548.0)*x1297))+(((-1.0)*r01*x1285*x1287))+(((159.0)*r00*sj1*x1285))+(((159.0)*cj3*x1294))+((cj3*x1289*x1298))+(((-0.799999744000123)*py*x1285*x1289))+((x1288*x1291))+(((-158.999949120024)*cj3*x1293))+(((-1.0)*x1291*x1292)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x1296*((x1299+((x1287*x1292))+((x1286*x1295))+(((-1.0)*x1289*x1298))+(((158.999949120024)*x1293))+(((-159.0)*x1297))+(((-159.0)*x1294))+((cj0*px*x1295))+(((-1.0)*x1287*x1288))+((x1289*x1290))))))+IKsqr((x1296*(x1301.value)*(((((-1.0)*px*x1285*x1295))+((cj3*x1287*x1288))+(((-547.999824640084)*x1293))+(((-1.0)*cj3*x1289*x1290))+(((-1.0)*cj3*x1286*x1295))+(((548.0)*x1294))+(((548.0)*x1297))+(((-1.0)*r01*x1285*x1287))+(((159.0)*r00*sj1*x1285))+(((159.0)*cj3*x1294))+((cj3*x1289*x1298))+(((-0.799999744000123)*py*x1285*x1289))+((x1288*x1291))+(((-158.999949120024)*cj3*x1293))+(((-1.0)*x1291*x1292))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x1296*((x1299+((x1287*x1292))+((x1286*x1295))+(((-1.0)*x1289*x1298))+(((158.999949120024)*x1293))+(((-159.0)*x1297))+(((-159.0)*x1294))+((cj0*px*x1295))+(((-1.0)*x1287*x1288))+((x1289*x1290))))), (x1296*(x1301.value)*(((((-1.0)*px*x1285*x1295))+((cj3*x1287*x1288))+(((-547.999824640084)*x1293))+(((-1.0)*cj3*x1289*x1290))+(((-1.0)*cj3*x1286*x1295))+(((548.0)*x1294))+(((548.0)*x1297))+(((-1.0)*r01*x1285*x1287))+(((159.0)*r00*sj1*x1285))+(((159.0)*cj3*x1294))+((cj3*x1289*x1298))+(((-0.799999744000123)*py*x1285*x1289))+((x1288*x1291))+(((-158.999949120024)*cj3*x1293))+(((-1.0)*x1291*x1292))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1302=IKcos(j2);
IkReal x1303=IKsin(j2);
IkReal x1304=pz*pz;
IkReal x1305=py*py;
IkReal x1306=px*px;
IkReal x1307=(pz*sj1);
IkReal x1308=(py*sj0);
IkReal x1309=(cj0*r00);
IkReal x1310=(cj1*px);
IkReal x1311=(cj0*r02);
IkReal x1312=((2.0)*px);
IkReal x1313=((0.999999680000154)*r02);
IkReal x1314=(pz*r00);
IkReal x1315=(cj1*sj0);
IkReal x1316=(px*r00);
IkReal x1317=(cj0*r01);
IkReal x1318=(r00*sj0);
IkReal x1319=((0.000799999744000123)*cj1);
IkReal x1320=((0.000799999744000123)*sj1);
IkReal x1321=((1.09599964928017)*pz);
IkReal x1322=((0.000240243123122213)*sj1);
IkReal x1323=(cj1*py);
IkReal x1324=(cj0*py);
IkReal x1325=(px*sj1);
IkReal x1326=(r02*sj0);
IkReal x1327=((0.325585)*cj3);
IkReal x1328=((0.999999680000154)*r01);
IkReal x1329=((0.000799999744000123)*pz);
IkReal x1330=((0.999999680000154)*r00);
IkReal x1331=(py*sj1);
IkReal x1332=((0.159)*sj3);
IkReal x1333=((0.00159999948800025)*pz);
IkReal x1334=((1.99999936000031)*r01);
IkReal x1335=((0.00159999948800025)*py);
IkReal x1336=((1.0)*cj1);
IkReal x1337=((0.300303903902766)*r02);
IkReal x1338=((2.0)*r02);
IkReal x1339=(cj1*pz);
IkReal x1340=((1.0)*r01);
IkReal x1341=((0.275023)*sj3);
IkReal x1342=((0.000799999744000123)*r00);
IkReal x1343=(r01*sj0*sj1);
IkReal x1344=(cj4*x1302);
IkReal x1345=((1.0)*x1305);
IkReal x1346=(sj4*x1303);
IkReal x1347=(sj1*x1304);
IkReal x1348=(sj1*x1306);
IkReal x1349=((1.0)*x1304);
IkReal x1350=(cj1*x1305);
IkReal x1351=((0.159)*x1303);
IkReal x1352=(cj3*x1302);
IkReal x1353=(sj1*x1305);
IkReal x1354=((0.548)*x1303);
IkReal x1355=(sj4*x1302);
IkReal x1356=(cj1*x1306);
evalcond[0]=(x1343+(((-1.0)*x1317*x1319))+((sj3*x1355))+((x1315*x1342))+((sj1*x1309))+(((-1.0)*cj1*x1313))+((cj3*x1346)));
evalcond[1]=(((sj4*x1352))+(((-1.0)*sj3*x1346))+(((-1.0)*sj1*x1313))+(((-1.0)*x1315*x1340))+(((-1.0)*x1309*x1336))+((x1318*x1320))+(((-1.0)*x1317*x1320)));
evalcond[2]=((0.548)+(((-1.0)*x1319*x1324))+(((-1.0)*x1303*x1332))+(((-0.999999680000154)*x1339))+(((0.548)*x1302))+(((0.159)*x1352))+(((0.000799999744000123)*sj0*x1310))+((sj1*x1308))+((cj0*x1325)));
evalcond[3]=((((-1.0)*x1354))+(((-1.0)*x1302*x1332))+(((-1.0)*cj3*x1351))+(((-1.0)*cj0*x1310))+(((-0.999999680000154)*x1307))+((px*sj0*x1320))+(((-1.0)*x1308*x1336))+(((-1.0)*x1320*x1324)));
evalcond[4]=(((pz*x1309*x1319))+((x1307*x1317))+(((-1.0)*r02*x1308*x1319))+(((-1.0)*x1323*x1330))+(((-1.0)*cj3*cj4*x1351))+(((-0.000799999744000123)*x1310*x1311))+(((-1.0)*x1311*x1331))+(((-1.0)*x1307*x1318))+((x1325*x1326))+(((-1.0)*cj4*x1354))+((r01*x1315*x1329))+(((-1.0)*x1332*x1344))+((x1310*x1328)));
evalcond[5]=(((x1314*x1315))+(((-0.548)*x1344))+(((-0.159)*cj3*x1344))+(((-1.0)*r02*x1308*x1320))+((cj4*x1303*x1332))+(((-1.0)*x1330*x1331))+(((0.547999824640084)*x1317))+(((0.000799999744000123)*r01*sj0*x1307))+((x1325*x1328))+(((-1.0)*px*x1311*x1320))+(((-0.000438399859712067)*r02))+(((-1.0)*pz*x1317*x1336))+(((0.000799999744000123)*x1307*x1309))+(((-0.547999824640084)*x1318))+(((-1.0)*x1310*x1326))+((x1311*x1323)));
evalcond[6]=((((-1.096)*x1316))+(((-1.0)*x1304*x1317*x1319))+(((-1.0)*x1341*x1355))+((x1309*x1353))+(((0.174264)*x1346))+((x1304*x1315*x1342))+((x1327*x1346))+(((1.99999936000031)*x1310*x1314))+((x1311*x1323*x1333))+(((-0.00159999948800025)*r01*x1308*x1310))+(((-0.300304)*sj1*x1309))+(((-0.300304)*x1343))+(((-1.096)*py*r01))+(((-1.0)*x1307*x1308*x1338))+(((-1.0)*x1309*x1348))+((x1305*x1315*x1342))+((cj1*x1337))+((x1309*x1310*x1335))+(((-1.0)*x1312*x1317*x1331))+(((-0.000240243123122213)*r00*x1315))+((x1306*x1343))+(((-1.0)*x1310*x1326*x1333))+(((-1.096)*pz*r02))+((x1305*x1317*x1319))+(((-1.0)*x1306*x1315*x1342))+(((-1.0)*x1307*x1311*x1312))+((cj1*x1304*x1313))+((x1304*x1343))+(((-1.0)*sj0*x1340*x1353))+(((-1.0)*x1313*x1356))+(((-1.0)*x1313*x1350))+(((-1.0)*x1306*x1317*x1319))+(((0.000240243123122213)*cj1*x1317))+((x1309*x1347))+((pz*x1323*x1334))+(((-1.0)*r00*sj1*x1308*x1312)));
evalcond[7]=(((x1309*x1356))+((x1304*x1318*x1320))+(((-1.0)*x1304*x1317*x1320))+((x1307*x1311*x1335))+((r01*x1305*x1315))+(((2.0)*pz*x1310*x1311))+((x1308*x1338*x1339))+((x1327*x1355))+(((0.174264)*x1355))+((x1305*x1318*x1320))+((x1309*x1321))+((x1313*x1347))+(((-1.0)*x1304*x1315*x1340))+(((-0.00159999948800025)*r01*x1308*x1325))+(((2.0)*r00*x1308*x1310))+((x1341*x1346))+(((-1.09599964928017)*px*x1311))+(((-0.300304)*cj1*x1309))+((r01*sj0*x1321))+((x1309*x1325*x1335))+(((-1.0)*x1306*x1315*x1340))+((py*x1307*x1334))+((x1305*x1317*x1320))+(((-1.0)*x1305*x1309*x1336))+(((1.99999936000031)*x1307*x1316))+(((-1.09599964928017)*r02*x1308))+(((0.000876799719424135)*py*r00))+(((2.0)*py*x1310*x1317))+(((-1.0)*sj1*x1337))+(((-1.0)*x1313*x1353))+(((-0.000876799719424135)*px*r01))+(((-0.00159999948800025)*px*x1307*x1326))+((x1318*x1322))+(((-1.0)*x1306*x1318*x1320))+(((-1.0)*x1313*x1348))+(((-1.0)*x1304*x1309*x1336))+(((-1.0)*x1306*x1317*x1320))+(((-1.0)*x1317*x1322))+(((-0.300304)*r01*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1357=(cj0*cj3);
IkReal x1358=(cj1*sj3);
IkReal x1359=((158.999949120024)*r02);
IkReal x1360=(px*sj3);
IkReal x1361=(sj0*sj3);
IkReal x1362=(r01*sj1);
IkReal x1363=(cj1*cj3);
IkReal x1364=(cj1*r01);
IkReal x1365=((548.0)*sj4);
IkReal x1366=(cj3*sj0);
IkReal x1367=(cj3*x1365);
IkReal x1368=((0.799999744000123)*cj1*sj4);
IkReal x1369=((1000.0)*sj1*sj4);
IkReal x1370=((0.12719995929602)*r00*sj0);
IkReal x1371=((999.999680000154)*pz*sj4);
IkReal x1372=(cj0*r00*sj1);
CheckValue<IkReal> x1373 = IKatan2WithCheck(IkReal(((((547.999824640084)*cj1*r02))+(((-159.0)*x1362*x1366))+((py*x1361*x1369))+(((-1.0)*x1358*x1371))+(((0.799999744000123)*px*sj0*sj4*x1358))+((x1359*x1363))+(((-548.0)*sj0*x1362))+(((-0.438399859712067)*cj1*r00*sj0))+(((-548.0)*x1372))+(((-159.0)*r00*sj1*x1357))+(((-1.0)*x1363*x1370))+(((0.12719995929602)*x1357*x1364))+((sj3*x1365))+(((-0.799999744000123)*cj0*py*sj4*x1358))+(((0.438399859712067)*cj0*x1364))+((cj0*x1360*x1369)))),IkReal(((((-1.0)*px*x1357*x1369))+((x1358*x1359))+(((-1.0)*x1358*x1370))+(((-159.0)*sj3*x1372))+((py*x1357*x1368))+(((0.12719995929602)*cj0*r01*x1358))+(((-1.0)*py*x1366*x1369))+((x1363*x1371))+(((-159.0)*x1361*x1362))+(((-0.799999744000123)*px*sj0*sj4*x1363))+(((-1.0)*x1367)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1373.valid){
continue;
}
CheckValue<IkReal> x1374=IKPowWithIntegerCheck(IKsign((x1367+(((159.0)*sj4)))),-1);
if(!x1374.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1373.value)+(((1.5707963267949)*(x1374.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1375=IKcos(j2);
IkReal x1376=IKsin(j2);
IkReal x1377=pz*pz;
IkReal x1378=py*py;
IkReal x1379=px*px;
IkReal x1380=(pz*sj1);
IkReal x1381=(py*sj0);
IkReal x1382=(cj0*r00);
IkReal x1383=(cj1*px);
IkReal x1384=(cj0*r02);
IkReal x1385=((2.0)*px);
IkReal x1386=((0.999999680000154)*r02);
IkReal x1387=(pz*r00);
IkReal x1388=(cj1*sj0);
IkReal x1389=(px*r00);
IkReal x1390=(cj0*r01);
IkReal x1391=(r00*sj0);
IkReal x1392=((0.000799999744000123)*cj1);
IkReal x1393=((0.000799999744000123)*sj1);
IkReal x1394=((1.09599964928017)*pz);
IkReal x1395=((0.000240243123122213)*sj1);
IkReal x1396=(cj1*py);
IkReal x1397=(cj0*py);
IkReal x1398=(px*sj1);
IkReal x1399=(r02*sj0);
IkReal x1400=((0.325585)*cj3);
IkReal x1401=((0.999999680000154)*r01);
IkReal x1402=((0.000799999744000123)*pz);
IkReal x1403=((0.999999680000154)*r00);
IkReal x1404=(py*sj1);
IkReal x1405=((0.159)*sj3);
IkReal x1406=((0.00159999948800025)*pz);
IkReal x1407=((1.99999936000031)*r01);
IkReal x1408=((0.00159999948800025)*py);
IkReal x1409=((1.0)*cj1);
IkReal x1410=((0.300303903902766)*r02);
IkReal x1411=((2.0)*r02);
IkReal x1412=(cj1*pz);
IkReal x1413=((1.0)*r01);
IkReal x1414=((0.275023)*sj3);
IkReal x1415=((0.000799999744000123)*r00);
IkReal x1416=(r01*sj0*sj1);
IkReal x1417=(cj4*x1375);
IkReal x1418=((1.0)*x1378);
IkReal x1419=(sj4*x1376);
IkReal x1420=(sj1*x1377);
IkReal x1421=(sj1*x1379);
IkReal x1422=((1.0)*x1377);
IkReal x1423=(cj1*x1378);
IkReal x1424=((0.159)*x1376);
IkReal x1425=(cj3*x1375);
IkReal x1426=(sj1*x1378);
IkReal x1427=((0.548)*x1376);
IkReal x1428=(sj4*x1375);
IkReal x1429=(cj1*x1379);
evalcond[0]=(((x1388*x1415))+((sj1*x1382))+(((-1.0)*x1390*x1392))+(((-1.0)*cj1*x1386))+x1416+((sj3*x1428))+((cj3*x1419)));
evalcond[1]=((((-1.0)*sj3*x1419))+((sj4*x1425))+(((-1.0)*x1382*x1409))+(((-1.0)*x1390*x1393))+((x1391*x1393))+(((-1.0)*x1388*x1413))+(((-1.0)*sj1*x1386)));
evalcond[2]=((0.548)+(((-1.0)*x1392*x1397))+(((0.000799999744000123)*sj0*x1383))+(((0.548)*x1375))+((sj1*x1381))+((cj0*x1398))+(((-1.0)*x1376*x1405))+(((-0.999999680000154)*x1412))+(((0.159)*x1425)));
evalcond[3]=((((-0.999999680000154)*x1380))+(((-1.0)*cj0*x1383))+(((-1.0)*x1393*x1397))+((px*sj0*x1393))+(((-1.0)*x1381*x1409))+(((-1.0)*cj3*x1424))+(((-1.0)*x1375*x1405))+(((-1.0)*x1427)));
evalcond[4]=((((-1.0)*x1380*x1391))+((r01*x1388*x1402))+((x1398*x1399))+(((-1.0)*cj4*x1427))+((pz*x1382*x1392))+(((-1.0)*cj3*cj4*x1424))+(((-0.000799999744000123)*x1383*x1384))+(((-1.0)*x1384*x1404))+(((-1.0)*r02*x1381*x1392))+(((-1.0)*x1405*x1417))+(((-1.0)*x1396*x1403))+((x1383*x1401))+((x1380*x1390)));
evalcond[5]=((((-0.159)*cj3*x1417))+(((-1.0)*x1383*x1399))+(((0.547999824640084)*x1390))+(((-1.0)*pz*x1390*x1409))+(((-0.548)*x1417))+(((-0.547999824640084)*x1391))+((x1387*x1388))+(((0.000799999744000123)*r01*sj0*x1380))+((cj4*x1376*x1405))+(((-1.0)*r02*x1381*x1393))+((x1398*x1401))+(((-0.000438399859712067)*r02))+(((-1.0)*px*x1384*x1393))+((x1384*x1396))+(((0.000799999744000123)*x1380*x1382))+(((-1.0)*x1403*x1404)));
evalcond[6]=((((-1.0)*sj0*x1413*x1426))+(((-1.0)*x1377*x1390*x1392))+((x1379*x1416))+((x1377*x1416))+(((-0.000240243123122213)*r00*x1388))+((x1377*x1388*x1415))+(((-1.0)*x1379*x1388*x1415))+(((-1.0)*x1385*x1390*x1404))+((x1400*x1419))+((x1378*x1388*x1415))+(((-1.0)*x1386*x1423))+(((-1.0)*x1386*x1429))+(((-1.0)*x1382*x1421))+((pz*x1396*x1407))+((x1382*x1420))+((x1382*x1426))+((cj1*x1377*x1386))+(((-1.096)*py*r01))+(((-1.0)*x1383*x1399*x1406))+(((-1.0)*x1380*x1381*x1411))+(((-0.300304)*x1416))+(((-1.096)*pz*r02))+(((1.99999936000031)*x1383*x1387))+(((-1.0)*r00*sj1*x1381*x1385))+(((-0.300304)*sj1*x1382))+(((-0.00159999948800025)*r01*x1381*x1383))+(((0.000240243123122213)*cj1*x1390))+((x1378*x1390*x1392))+((cj1*x1410))+((x1382*x1383*x1408))+(((-1.0)*x1414*x1428))+(((-1.096)*x1389))+((x1384*x1396*x1406))+(((-1.0)*x1379*x1390*x1392))+(((-1.0)*x1380*x1384*x1385))+(((0.174264)*x1419)));
evalcond[7]=(((x1382*x1394))+(((-1.0)*x1378*x1382*x1409))+((x1381*x1411*x1412))+(((-1.0)*x1377*x1390*x1393))+((x1380*x1384*x1408))+(((-0.00159999948800025)*px*x1380*x1399))+(((-1.0)*x1377*x1388*x1413))+(((-1.09599964928017)*px*x1384))+(((1.99999936000031)*x1380*x1389))+(((-1.09599964928017)*r02*x1381))+(((-1.0)*x1379*x1388*x1413))+(((-1.0)*x1386*x1421))+(((-1.0)*x1386*x1426))+((x1400*x1428))+((x1382*x1429))+(((-0.300304)*cj1*x1382))+(((0.174264)*x1428))+((x1377*x1391*x1393))+(((-1.0)*x1377*x1382*x1409))+(((-1.0)*x1390*x1395))+(((-0.300304)*r01*x1388))+((r01*x1378*x1388))+((x1386*x1420))+((x1378*x1390*x1393))+(((-0.00159999948800025)*r01*x1381*x1398))+(((-1.0)*sj1*x1410))+(((2.0)*py*x1383*x1390))+(((2.0)*r00*x1381*x1383))+((r01*sj0*x1394))+((x1391*x1395))+(((0.000876799719424135)*py*r00))+(((-0.000876799719424135)*px*r01))+(((-1.0)*x1379*x1390*x1393))+((x1382*x1398*x1408))+((x1378*x1391*x1393))+(((2.0)*pz*x1383*x1384))+((x1414*x1419))+((py*x1380*x1407))+(((-1.0)*x1379*x1391*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1430=(cj3*sj0);
IkReal x1431=(r01*sj1);
IkReal x1432=(cj1*r00);
IkReal x1433=(cj0*sj3);
IkReal x1434=(cj0*cj3);
IkReal x1435=((0.999999680000154)*r02);
IkReal x1436=(r00*sj1);
IkReal x1437=(sj0*sj3);
IkReal x1438=(cj1*r01);
CheckValue<IkReal> x1439=IKPowWithIntegerCheck(IKsign(sj4),-1);
if(!x1439.valid){
continue;
}
CheckValue<IkReal> x1440 = IKatan2WithCheck(IkReal(((((-0.000799999744000123)*x1431*x1433))+(((-0.000799999744000123)*x1430*x1432))+(((-1.0)*x1434*x1436))+(((-1.0)*x1437*x1438))+(((0.000799999744000123)*x1436*x1437))+((cj1*cj3*x1435))+(((-1.0)*x1432*x1433))+(((-1.0)*x1430*x1431))+(((0.000799999744000123)*x1434*x1438))+(((-1.0)*sj1*sj3*x1435)))),IkReal((((x1432*x1434))+((x1430*x1438))+(((-0.000799999744000123)*x1430*x1436))+(((-0.000799999744000123)*x1432*x1437))+(((0.000799999744000123)*x1431*x1434))+(((-1.0)*x1431*x1437))+(((0.000799999744000123)*x1433*x1438))+((cj3*sj1*x1435))+((cj1*sj3*x1435))+(((-1.0)*x1433*x1436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1440.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1439.value)))+(x1440.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x1441=IKcos(j2);
IkReal x1442=IKsin(j2);
IkReal x1443=pz*pz;
IkReal x1444=py*py;
IkReal x1445=px*px;
IkReal x1446=(pz*sj1);
IkReal x1447=(py*sj0);
IkReal x1448=(cj0*r00);
IkReal x1449=(cj1*px);
IkReal x1450=(cj0*r02);
IkReal x1451=((2.0)*px);
IkReal x1452=((0.999999680000154)*r02);
IkReal x1453=(pz*r00);
IkReal x1454=(cj1*sj0);
IkReal x1455=(px*r00);
IkReal x1456=(cj0*r01);
IkReal x1457=(r00*sj0);
IkReal x1458=((0.000799999744000123)*cj1);
IkReal x1459=((0.000799999744000123)*sj1);
IkReal x1460=((1.09599964928017)*pz);
IkReal x1461=((0.000240243123122213)*sj1);
IkReal x1462=(cj1*py);
IkReal x1463=(cj0*py);
IkReal x1464=(px*sj1);
IkReal x1465=(r02*sj0);
IkReal x1466=((0.325585)*cj3);
IkReal x1467=((0.999999680000154)*r01);
IkReal x1468=((0.000799999744000123)*pz);
IkReal x1469=((0.999999680000154)*r00);
IkReal x1470=(py*sj1);
IkReal x1471=((0.159)*sj3);
IkReal x1472=((0.00159999948800025)*pz);
IkReal x1473=((1.99999936000031)*r01);
IkReal x1474=((0.00159999948800025)*py);
IkReal x1475=((1.0)*cj1);
IkReal x1476=((0.300303903902766)*r02);
IkReal x1477=((2.0)*r02);
IkReal x1478=(cj1*pz);
IkReal x1479=((1.0)*r01);
IkReal x1480=((0.275023)*sj3);
IkReal x1481=((0.000799999744000123)*r00);
IkReal x1482=(r01*sj0*sj1);
IkReal x1483=(cj4*x1441);
IkReal x1484=((1.0)*x1444);
IkReal x1485=(sj4*x1442);
IkReal x1486=(sj1*x1443);
IkReal x1487=(sj1*x1445);
IkReal x1488=((1.0)*x1443);
IkReal x1489=(cj1*x1444);
IkReal x1490=((0.159)*x1442);
IkReal x1491=(cj3*x1441);
IkReal x1492=(sj1*x1444);
IkReal x1493=((0.548)*x1442);
IkReal x1494=(sj4*x1441);
IkReal x1495=(cj1*x1445);
evalcond[0]=(((sj3*x1494))+((cj3*x1485))+((sj1*x1448))+((x1454*x1481))+(((-1.0)*cj1*x1452))+x1482+(((-1.0)*x1456*x1458)));
evalcond[1]=((((-1.0)*sj3*x1485))+((sj4*x1491))+(((-1.0)*sj1*x1452))+(((-1.0)*x1448*x1475))+(((-1.0)*x1454*x1479))+(((-1.0)*x1456*x1459))+((x1457*x1459)));
evalcond[2]=((0.548)+(((-1.0)*x1458*x1463))+(((-0.999999680000154)*x1478))+((cj0*x1464))+((sj1*x1447))+(((0.159)*x1491))+(((-1.0)*x1442*x1471))+(((0.548)*x1441))+(((0.000799999744000123)*sj0*x1449)));
evalcond[3]=((((-1.0)*cj3*x1490))+(((-0.999999680000154)*x1446))+(((-1.0)*x1493))+(((-1.0)*x1459*x1463))+(((-1.0)*x1441*x1471))+((px*sj0*x1459))+(((-1.0)*x1447*x1475))+(((-1.0)*cj0*x1449)));
evalcond[4]=((((-1.0)*x1450*x1470))+((x1446*x1456))+((pz*x1448*x1458))+((r01*x1454*x1468))+(((-0.000799999744000123)*x1449*x1450))+(((-1.0)*x1462*x1469))+((x1464*x1465))+(((-1.0)*cj3*cj4*x1490))+((x1449*x1467))+(((-1.0)*cj4*x1493))+(((-1.0)*x1471*x1483))+(((-1.0)*x1446*x1457))+(((-1.0)*r02*x1447*x1458)));
evalcond[5]=((((0.547999824640084)*x1456))+(((0.000799999744000123)*x1446*x1448))+(((-1.0)*px*x1450*x1459))+(((-0.159)*cj3*x1483))+((x1450*x1462))+((cj4*x1442*x1471))+((x1464*x1467))+(((-0.547999824640084)*x1457))+(((-1.0)*x1469*x1470))+(((-0.548)*x1483))+(((-1.0)*pz*x1456*x1475))+(((0.000799999744000123)*r01*sj0*x1446))+(((-0.000438399859712067)*r02))+(((-1.0)*x1449*x1465))+((x1453*x1454))+(((-1.0)*r02*x1447*x1459)));
evalcond[6]=((((-0.000240243123122213)*r00*x1454))+(((-1.0)*x1446*x1450*x1451))+((pz*x1462*x1473))+((x1445*x1482))+(((-1.096)*x1455))+(((-1.0)*sj0*x1479*x1492))+((cj1*x1476))+(((-1.0)*x1446*x1447*x1477))+(((-1.0)*x1451*x1456*x1470))+((x1444*x1456*x1458))+(((-1.0)*x1445*x1454*x1481))+((x1466*x1485))+(((-1.0)*x1448*x1487))+((x1443*x1454*x1481))+((x1450*x1462*x1472))+(((-1.0)*x1480*x1494))+(((1.99999936000031)*x1449*x1453))+((x1444*x1454*x1481))+(((-1.096)*py*r01))+((cj1*x1443*x1452))+(((-1.096)*pz*r02))+(((-1.0)*x1452*x1489))+(((-1.0)*x1445*x1456*x1458))+((x1443*x1482))+(((-1.0)*x1452*x1495))+(((-0.300304)*sj1*x1448))+(((-1.0)*r00*sj1*x1447*x1451))+((x1448*x1492))+((x1448*x1449*x1474))+(((0.174264)*x1485))+((x1448*x1486))+(((-1.0)*x1449*x1465*x1472))+(((-0.300304)*x1482))+(((0.000240243123122213)*cj1*x1456))+(((-0.00159999948800025)*r01*x1447*x1449))+(((-1.0)*x1443*x1456*x1458)));
evalcond[7]=((((-1.0)*x1443*x1454*x1479))+(((-1.0)*sj1*x1476))+(((-1.0)*x1444*x1448*x1475))+((x1480*x1485))+((x1466*x1494))+(((2.0)*r00*x1447*x1449))+(((2.0)*py*x1449*x1456))+(((-1.0)*x1456*x1461))+((x1444*x1456*x1459))+(((-0.300304)*cj1*x1448))+(((-1.0)*x1443*x1448*x1475))+(((-1.09599964928017)*px*x1450))+((x1448*x1460))+((x1448*x1464*x1474))+(((-0.300304)*r01*x1454))+((x1444*x1457*x1459))+((py*x1446*x1473))+(((-1.09599964928017)*r02*x1447))+((r01*sj0*x1460))+((x1452*x1486))+((x1443*x1457*x1459))+(((-0.00159999948800025)*r01*x1447*x1464))+(((-1.0)*x1445*x1457*x1459))+(((-1.0)*x1445*x1454*x1479))+((x1446*x1450*x1474))+(((-1.0)*x1452*x1487))+(((-1.0)*x1445*x1456*x1459))+(((2.0)*pz*x1449*x1450))+(((-1.0)*x1452*x1492))+((x1457*x1461))+(((0.000876799719424135)*py*r00))+((x1448*x1495))+((r01*x1444*x1454))+(((-0.000876799719424135)*px*r01))+(((1.99999936000031)*x1446*x1455))+(((-1.0)*x1443*x1456*x1459))+(((0.174264)*x1494))+((x1447*x1477*x1478))+(((-0.00159999948800025)*px*x1446*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
    }
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - robotarm_5DOF (5e4da241a06610e6d6f71d124dd9a2e2)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
